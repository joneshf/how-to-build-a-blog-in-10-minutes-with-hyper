// Generated by purs version 0.11.4
"use strict";
var Control_Apply = require("../Control.Apply");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor = require("../Data.Functor");
var Data_Generic = require("../Data.Generic");
var Data_Maybe = require("../Data.Maybe");
var Data_Newtype = require("../Data.Newtype");
var Data_Unit = require("../Data.Unit");
var Text_Smolder_Markup = require("../Text.Smolder.Markup");
var Type_Trout_ContentType_HTML = require("../Type.Trout.ContentType.HTML");
var Collection = function (x) {
    return x;
};
var newtypeCollection = new Data_Newtype.Newtype(function (n) {
    return n;
}, Collection);
var genericCollection = function (dictGeneric) {
    return new Data_Generic.Generic(function (v) {
        if (v instanceof Data_Generic.SProd && (v.value0 === "Blog.Types.Collection.Collection" && v.value1.length === 1)) {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Collection))(Data_Generic.fromSpine(Data_Generic.genericArray(dictGeneric))(v["value1"][0](Data_Unit.unit)));
        };
        return Data_Maybe.Nothing.value;
    }, function ($dollarq) {
        return new Data_Generic.SigProd("Blog.Types.Collection.Collection", [ {
            sigConstructor: "Blog.Types.Collection.Collection", 
            sigValues: [ function ($dollarq1) {
                return Data_Generic.toSignature(Data_Generic.genericArray(dictGeneric))(Data_Generic.anyProxy);
            } ]
        } ]);
    }, function (v) {
        return new Data_Generic.SProd("Blog.Types.Collection.Collection", [ function ($dollarq) {
            return Data_Generic.toSpine(Data_Generic.genericArray(dictGeneric))(v);
        } ]);
    });
};
var functorCollection = new Data_Functor.Functor(function (f) {
    return function (m) {
        return Data_Functor.map(Data_Functor.functorArray)(f)(m);
    };
});
var foldableCollection = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function ($19) {
            return Data_Foldable.foldMap(Data_Foldable.foldableArray)(dictMonoid)(f)(Data_Newtype.unwrap(newtypeCollection)($19));
        };
    };
}, function (f) {
    return function (z) {
        return function ($20) {
            return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(z)(Data_Newtype.unwrap(newtypeCollection)($20));
        };
    };
}, function (f) {
    return function (z) {
        return function ($21) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(Data_Newtype.unwrap(newtypeCollection)($21));
        };
    };
});
var encodeHTMLCollection = function (dictEncodeHTML) {
    return new Type_Trout_ContentType_HTML.EncodeHTML(Data_Foldable.foldMap(foldableCollection)(Text_Smolder_Markup.monoidMarkup)(Type_Trout_ContentType_HTML.encodeHTML(dictEncodeHTML)));
};
module.exports = {
    Collection: Collection, 
    functorCollection: functorCollection, 
    genericCollection: genericCollection, 
    newtypeCollection: newtypeCollection, 
    foldableCollection: foldableCollection, 
    encodeHTMLCollection: encodeHTMLCollection
};
