// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Gen_Class = require("../Control.Monad.Gen.Class");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Eq = require("../Data.Eq");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid_Additive = require("../Data.Monoid.Additive");
var Data_Newtype = require("../Data.Newtype");
var Data_NonEmpty = require("../Data.NonEmpty");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Data_Tuple = require("../Data.Tuple");
var Data_Unfoldable = require("../Data.Unfoldable");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var unfoldable = function (dictMonadRec) {
    return function (dictMonadGen) {
        return function (dictUnfoldable) {
            return function (gen) {
                var unfold = function (v) {
                    if (v instanceof Nil) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (v instanceof Cons) {
                        return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Gen line 88, column 12 - line 90, column 35: " + [ v.constructor.name ]);
                };
                var loopGen = function (v) {
                    if (v.value1 === 0) {
                        return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                    };
                    return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(gen)(function (v1) {
                        return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(new Cons(v1, v.value0), v.value1 - 1 | 0)));
                    });
                };
                return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Unfoldable.unfoldr(dictUnfoldable)(unfold))(Control_Monad_Gen_Class.sized(dictMonadGen)(function ($56) {
                    return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(loopGen)(Data_Tuple.Tuple.create(Nil.value)($56));
                }));
            };
        };
    };
};
var suchThat = function (dictMonadRec) {
    return function (dictMonadGen) {
        return function (gen) {
            return function (pred) {
                var go = function (v) {
                    return Data_Functor.mapFlipped((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(gen)(function (a) {
                        var $34 = pred(a);
                        if ($34) {
                            return new Control_Monad_Rec_Class.Done(a);
                        };
                        return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                    });
                };
                return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_Unit.unit);
            };
        };
    };
};
var fromIndex = function (dictFoldable) {
    return function (i) {
        return function (a) {
            var go = function (v) {
                return function (x) {
                    return new Data_Tuple.Tuple(v.value0 + 1 | 0, (function () {
                        var $37 = v.value0 === i;
                        if ($37) {
                            return new Data_Maybe.Just(x);
                        };
                        return v.value1;
                    })());
                };
            };
            return function ($57) {
                return Data_Maybe.fromMaybe(a)(Data_Tuple.snd(Data_Foldable.foldl(dictFoldable)(go)(new Data_Tuple.Tuple(0, new Data_Maybe.Just(a)))($57)));
            };
        };
    };
};
var oneOf = function (dictMonadGen) {
    return function (dictFoldable) {
        return function (v) {
            return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(Data_Foldable.length(dictFoldable)(Data_Semiring.semiringInt)(v.value1)))(function (v1) {
                var $42 = v1 < 1;
                if ($42) {
                    return v.value0;
                };
                return fromIndex(dictFoldable)(v1 - 1 | 0)(v.value0)(v.value1);
            });
        };
    };
};
var frequency = function (dictMonadGen) {
    return function (dictFoldable) {
        return function (v) {
            var first = Data_Tuple.fst(v.value0);
            var total = first + Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Additive.newtypeAdditive)(Data_Monoid_Additive.newtypeAdditive)(Data_Monoid_Additive.Additive)(Data_Foldable.foldMap(dictFoldable)(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber)))(Data_Tuple.fst)(v.value1);
            return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(total))(function (v1) {
                var n = Data_Int.round((v1 / total) * Data_Foldable.length(dictFoldable)(Data_Semiring.semiringNumber)(v.value1));
                return Data_Tuple.snd((function () {
                    var $47 = n === 0;
                    if ($47) {
                        return v.value0;
                    };
                    return fromIndex(dictFoldable)(n - 1 | 0)(v.value0)(v.value1);
                })());
            });
        };
    };
};
var elements = function (dictMonadGen) {
    return function (dictFoldable) {
        return function (v) {
            return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(Data_Foldable.length(dictFoldable)(Data_Semiring.semiringInt)(v.value1)))(function (v1) {
                return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())((function () {
                    var $52 = v1 === 0;
                    if ($52) {
                        return v.value0;
                    };
                    return fromIndex(dictFoldable)(v1 - 1 | 0)(v.value0)(v.value1);
                })());
            });
        };
    };
};
var choose = function (dictMonadGen) {
    return function (genA) {
        return function (genB) {
            return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseBool(dictMonadGen))(function (v) {
                if (v) {
                    return genA;
                };
                return genB;
            });
        };
    };
};
module.exports = {
    choose: choose, 
    elements: elements, 
    frequency: frequency, 
    oneOf: oneOf, 
    suchThat: suchThat, 
    unfoldable: unfoldable
};
