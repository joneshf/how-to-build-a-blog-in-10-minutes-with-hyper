// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Applicative = require("../Control.Applicative");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Unsafe = require("../Control.Monad.Eff.Unsafe");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array = require("../Data.Array");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Leibniz = require("../Data.Leibniz");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Node_Buffer = require("../Node.Buffer");
var Node_Encoding = require("../Node.Encoding");
var Prelude = require("../Prelude");
var Test_QuickCheck = require("../Test.QuickCheck");
var Test_QuickCheck_Arbitrary = require("../Test.QuickCheck.Arbitrary");
var Test_QuickCheck_Gen = require("../Test.QuickCheck.Gen");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var ByteString = function (x) {
    return x;
};
var Foldable = function (x) {
    return x;
};
var unsafeThaw = function (v) {
    return v;
};
var unsafeFreeze = ByteString;
var unpack = function ($25) {
    return Control_Monad_Eff_Unsafe.unsafePerformEff(Node_Buffer.toArray(unsafeThaw($25)));
};
var toString = function (s) {
    return function (e) {
        return Control_Monad_Eff_Unsafe.unsafePerformEff(Node_Buffer.toString(e)(unsafeThaw(s)));
    };
};
var showByteString = new Data_Show.Show(function (bs) {
    return "(pack " + (Data_Show.show(Data_Show.showArray(Data_Show.showInt))(unpack(bs)) + ")");
});
var semigroupByteString = new Data_Semigroup.Semigroup(function (a) {
    return function (b) {
        return unsafeFreeze(Control_Monad_Eff_Unsafe.unsafePerformEff(Node_Buffer.concat([ unsafeThaw(a), unsafeThaw(b) ])));
    };
});
var pack = function ($26) {
    return unsafeFreeze(Control_Monad_Eff_Unsafe.unsafePerformEff(Node_Buffer.fromArray($26)));
};
var reverse = function ($27) {
    return pack(Data_Array.reverse(unpack($27)));
};
var singleton = function ($28) {
    return pack(Control_Applicative.pure(Control_Applicative.applicativeArray)($28));
};
var snoc = function (bs) {
    return function (b) {
        return Data_Semigroup.append(semigroupByteString)(bs)(singleton(b));
    };
};
var uncons = function (bs) {
    return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Array.uncons(unpack(bs)))(function (v) {
        return {
            head: v.head, 
            tail: pack(v.tail)
        };
    });
};
var tail = function ($29) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.tail;
    })(uncons($29));
};
var unsnoc = function (bs) {
    return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Array.unsnoc(unpack(bs)))(function (v) {
        return {
            init: pack(v.init), 
            last: v.last
        };
    });
};
var newtypeFoldable = new Data_Newtype.Newtype(function (n) {
    return n;
}, Foldable);
var map = function (f) {
    return function ($30) {
        return pack(Data_Functor.map(Data_Functor.functorArray)(f)(unpack($30)));
    };
};
var length = function ($31) {
    return Control_Monad_Eff_Unsafe.unsafePerformEff(Node_Buffer.size(unsafeThaw($31)));
};
var isEmpty = function ($32) {
    return 0 === length($32);
};
var init = function ($33) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.init;
    })(unsnoc($33));
};
var index = function (b) {
    return function (i) {
        return Control_Monad_Eff_Unsafe.unsafePerformEff($foreign.realGetAtOffset(i)(unsafeThaw(b)));
    };
};
var last = function (bs) {
    return index(bs)(length(bs) - 1 | 0);
};
var head = function (v) {
    return index(v)(0);
};
var fromUTF8 = Data_Function.flip(toString)(Node_Encoding.UTF8.value);
var fromString = function (s) {
    return function (e) {
        return unsafeFreeze(Control_Monad_Eff_Unsafe.unsafePerformEff(Node_Buffer.fromString(s)(e)));
    };
};
var toUTF8 = Data_Function.flip(fromString)(Node_Encoding.UTF8.value);
var foldableOfOctet = Data_Function["const"](Unsafe_Coerce.unsafeCoerce);
var foldableFoldable = new Data_Foldable.Foldable(function (dictMonoid) {
    return Data_Foldable.foldMapDefaultL(foldableFoldable)(dictMonoid);
}, function (f) {
    return function (z) {
        return function (v) {
            var leibniz = foldableOfOctet(v);
            var f$prime = function (x) {
                return function (o) {
                    return f(x)(Data_Leibniz.coerceSymm(leibniz)(o));
                };
            };
            return $foreign.foldl(f$prime)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            var leibniz = foldableOfOctet(v);
            var f$prime = function (o) {
                return function (x) {
                    return f(Data_Leibniz.coerceSymm(leibniz)(o))(x);
                };
            };
            return $foreign.foldr(f$prime)(z)(v);
        };
    };
});
var eqByteString = new Data_Eq.Eq(function (a) {
    return function (b) {
        return Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqInt))(unpack(a))(unpack(b));
    };
});
var ordByteString = new Data_Ord.Ord(function () {
    return eqByteString;
}, function (a) {
    return function (b) {
        return Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordInt))(unpack(a))(unpack(b));
    };
});
var empty = pack([  ]);
var monoidByteString = new Data_Monoid.Monoid(function () {
    return semigroupByteString;
}, empty);
var cons = function (b) {
    return function (bs) {
        return Data_Semigroup.append(semigroupByteString)(singleton(b))(bs);
    };
};
var arbitraryByteString = new Test_QuickCheck_Arbitrary.Arbitrary(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Function.flip(fromString)(Node_Encoding.UTF8.value))(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbString)));
module.exports = {
    cons: cons, 
    empty: empty, 
    foldableOfOctet: foldableOfOctet, 
    fromString: fromString, 
    fromUTF8: fromUTF8, 
    head: head, 
    index: index, 
    init: init, 
    isEmpty: isEmpty, 
    last: last, 
    length: length, 
    map: map, 
    pack: pack, 
    reverse: reverse, 
    singleton: singleton, 
    snoc: snoc, 
    tail: tail, 
    toString: toString, 
    toUTF8: toUTF8, 
    uncons: uncons, 
    unpack: unpack, 
    unsafeFreeze: unsafeFreeze, 
    unsafeThaw: unsafeThaw, 
    unsnoc: unsnoc, 
    semigroupByteString: semigroupByteString, 
    monoidByteString: monoidByteString, 
    eqByteString: eqByteString, 
    ordByteString: ordByteString, 
    arbitraryByteString: arbitraryByteString, 
    showByteString: showByteString, 
    newtypeFoldable: newtypeFoldable, 
    foldableFoldable: foldableFoldable, 
    foldl: $foreign.foldl, 
    foldr: $foreign.foldr, 
    unsafeIndex: $foreign.unsafeIndex
};
