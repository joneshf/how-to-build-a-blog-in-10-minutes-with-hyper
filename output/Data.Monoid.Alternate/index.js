// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Control_Monad = require("../Control.Monad");
var Control_Plus = require("../Control.Plus");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Invariant = require("../Data.Functor.Invariant");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var Alternate = function (x) {
    return x;
};
var showAlternate = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Alternate " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupAlternate = function (dictAlt) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Alt.alt(dictAlt)(v)(v1);
        };
    });
};
var plusAlternate = function (dictPlus) {
    return dictPlus;
};
var ordAlternate = function (dictOrd) {
    return dictOrd;
};
var newtypeAlternate = new Data_Newtype.Newtype(function (n) {
    return n;
}, Alternate);
var monoidAlternate = function (dictPlus) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAlternate(dictPlus.Alt0());
    }, Control_Plus.empty(dictPlus));
};
var monadAlternate = function (dictMonad) {
    return dictMonad;
};
var invariantAlternate = function (dictInvariant) {
    return dictInvariant;
};
var functorAlternate = function (dictFunctor) {
    return dictFunctor;
};
var extendAlternate = function (dictExtend) {
    return dictExtend;
};
var eqAlternate = function (dictEq) {
    return dictEq;
};
var comonadAlternate = function (dictComonad) {
    return dictComonad;
};
var boundedAlternate = function (dictBounded) {
    return dictBounded;
};
var bindAlternate = function (dictBind) {
    return dictBind;
};
var applyAlternate = function (dictApply) {
    return dictApply;
};
var applicativeAlternate = function (dictApplicative) {
    return dictApplicative;
};
var alternativeAlternate = function (dictAlternative) {
    return dictAlternative;
};
var altAlternate = function (dictAlt) {
    return dictAlt;
};
module.exports = {
    Alternate: Alternate, 
    newtypeAlternate: newtypeAlternate, 
    eqAlternate: eqAlternate, 
    ordAlternate: ordAlternate, 
    boundedAlternate: boundedAlternate, 
    functorAlternate: functorAlternate, 
    invariantAlternate: invariantAlternate, 
    applyAlternate: applyAlternate, 
    applicativeAlternate: applicativeAlternate, 
    altAlternate: altAlternate, 
    plusAlternate: plusAlternate, 
    alternativeAlternate: alternativeAlternate, 
    bindAlternate: bindAlternate, 
    monadAlternate: monadAlternate, 
    extendAlternate: extendAlternate, 
    comonadAlternate: comonadAlternate, 
    showAlternate: showAlternate, 
    semigroupAlternate: semigroupAlternate, 
    monoidAlternate: monoidAlternate
};
