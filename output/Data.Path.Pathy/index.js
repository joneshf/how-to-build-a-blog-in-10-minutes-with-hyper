// Generated by purs version 0.11.4
"use strict";
var Control_Apply = require("../Control.Apply");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array = require("../Data.Array");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Boolean = require("../Data.Boolean");
var Data_Either = require("../Data.Either");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_Tuple = require("../Data.Tuple");
var Prelude = require("../Prelude");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var FileName = function (x) {
    return x;
};
var Escaper = function (x) {
    return x;
};
var DirName = function (x) {
    return x;
};
var Current = (function () {
    function Current() {

    };
    Current.value = new Current();
    return Current;
})();
var Root = (function () {
    function Root() {

    };
    Root.value = new Root();
    return Root;
})();
var ParentIn = (function () {
    function ParentIn(value0) {
        this.value0 = value0;
    };
    ParentIn.create = function (value0) {
        return new ParentIn(value0);
    };
    return ParentIn;
})();
var DirIn = (function () {
    function DirIn(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DirIn.create = function (value0) {
        return function (value1) {
            return new DirIn(value0, value1);
        };
    };
    return DirIn;
})();
var FileIn = (function () {
    function FileIn(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    FileIn.create = function (value0) {
        return function (value1) {
            return new FileIn(value0, value1);
        };
    };
    return FileIn;
})();
var unsandbox = function (v) {
    if (v instanceof Current) {
        return Current.value;
    };
    if (v instanceof Root) {
        return Root.value;
    };
    if (v instanceof ParentIn) {
        return new ParentIn(unsandbox(v.value0));
    };
    if (v instanceof DirIn) {
        return new DirIn(unsandbox(v.value0), v.value1);
    };
    if (v instanceof FileIn) {
        return new FileIn(unsandbox(v.value0), v.value1);
    };
    throw new Error("Failed pattern match at Data.Path.Pathy line 354, column 1 - line 354, column 28: " + [ v.constructor.name ]);
};
var unsafeCoerceType = Unsafe_Coerce.unsafeCoerce;
var showPath = new Data_Show.Show(function (v) {
    if (v instanceof Current) {
        return "currentDir";
    };
    if (v instanceof Root) {
        return "rootDir";
    };
    if (v instanceof ParentIn) {
        return "(parentDir' " + (Data_Show.show(showPath)(v.value0) + ")");
    };
    if (v instanceof FileIn) {
        return "(" + (Data_Show.show(showPath)(v.value0) + (" </> file " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
    };
    if (v instanceof DirIn) {
        return "(" + (Data_Show.show(showPath)(v.value0) + (" </> dir " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
    };
    throw new Error("Failed pattern match at Data.Path.Pathy line 524, column 3 - line 525, column 3: " + [ v.constructor.name ]);
});
var showFileName = new Data_Show.Show(function (v) {
    return "(FileName " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var showDirName = new Data_Show.Show(function (v) {
    return "(DirName " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var runFileName = function (v) {
    return v;
};
var runEscaper = function (v) {
    return v;
};
var unsafePrintPath$prime = function (r) {
    var $$escape = runEscaper(r);
    var go = function (v) {
        if (v instanceof Current) {
            return "./";
        };
        if (v instanceof Root) {
            return "/";
        };
        if (v instanceof ParentIn) {
            return go(v.value0) + "../";
        };
        if (v instanceof DirIn && v.value0 instanceof FileIn) {
            return go(v.value0) + ("/" + ($$escape(v.value1) + "/"));
        };
        if (v instanceof DirIn) {
            return go(v.value0) + ($$escape(v.value1) + "/");
        };
        if (v instanceof FileIn && v.value0 instanceof FileIn) {
            return go(v.value0) + ("/" + $$escape(v.value1));
        };
        if (v instanceof FileIn) {
            return go(v.value0) + $$escape(v.value1);
        };
        throw new Error("Failed pattern match at Data.Path.Pathy line 405, column 22 - line 414, column 26: " + [ v.constructor.name ]);
    };
    return go;
};
var runDirName = function (v) {
    return v;
};
var rootDir = Root.value;
var renameFile = function (v) {
    return function (v1) {
        if (v1 instanceof FileIn) {
            return new FileIn(v1.value0, v(v1.value1));
        };
        return v1;
    };
};
var renameDir = function (v) {
    return function (v1) {
        if (v1 instanceof DirIn) {
            return new DirIn(v1.value0, v(v1.value1));
        };
        return v1;
    };
};
var refine = function (f) {
    return function (d) {
        var go = function (v) {
            if (v instanceof Current) {
                return Current.value;
            };
            if (v instanceof Root) {
                return Root.value;
            };
            if (v instanceof ParentIn) {
                return new ParentIn(go(v.value0));
            };
            if (v instanceof DirIn) {
                return new DirIn(go(v.value0), d(v.value1));
            };
            if (v instanceof FileIn) {
                return new FileIn(go(v.value0), f(v.value1));
            };
            throw new Error("Failed pattern match at Data.Path.Pathy line 465, column 14 - line 470, column 52: " + [ v.constructor.name ]);
        };
        return go;
    };
};
var printPath$prime = unsafePrintPath$prime;
var parsePath = function (rd) {
    return function (ad) {
        return function (rf) {
            return function (af) {
                return function (v) {
                    if (v === "") {
                        return rd(Current.value);
                    };
                    var segs = Data_String.split("/")(v);
                    var last = Data_Array.length(segs) - 1 | 0;
                    var tuples = Data_Array.zipWith(Data_Tuple.Tuple.create)(segs)(Data_Array.range(0)(last));
                    var isFile = Data_Maybe.maybe(false)(function (v1) {
                        return v1 !== "";
                    })(Data_Array.index(segs)(last));
                    var isAbs = Data_String.take(1)(v) === "/";
                    var folder = function (base) {
                        return function (v1) {
                            if (v1.value0 === ".") {
                                return base;
                            };
                            if (v1.value0 === "") {
                                return base;
                            };
                            if (v1.value0 === "..") {
                                return new ParentIn(base);
                            };
                            if (isFile && v1.value1 === last) {
                                return new FileIn(base, v1.value0);
                            };
                            if (Data_Boolean.otherwise) {
                                return new DirIn(base, v1.value0);
                            };
                            throw new Error("Failed pattern match at Data.Path.Pathy line 494, column 7 - line 499, column 50: " + [ v1.value0.constructor.name ]);
                        };
                    };
                    if (isAbs && isFile) {
                        return af(Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(Root.value)(tuples));
                    };
                    if (isAbs && !isFile) {
                        return ad(Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(Root.value)(tuples));
                    };
                    if (!isAbs && isFile) {
                        return rf(Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(Current.value)(tuples));
                    };
                    if (!isAbs && !isFile) {
                        return rd(Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(Current.value)(tuples));
                    };
                    throw new Error("Failed pattern match at Data.Path.Pathy line 501, column 5 - line 505, column 55: " + [ isAbs.constructor.name, isFile.constructor.name ]);
                };
            };
        };
    };
};
var parseRelDir = parsePath(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value));
var parseRelFile = parsePath(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
var parseAbsFile = parsePath(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
var parseAbsDir = parsePath(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value));
var parentDir$prime = function ($241) {
    return ParentIn.create(unsafeCoerceType(unsandbox($241)));
};
var nonEscaper = function (s) {
    return Data_String.joinWith("")(Data_Array.filter(function (v) {
        return v !== "/";
    })(Data_String.split("")(s)));
};
var posixEscaper = Escaper(function ($242) {
    return (function (v) {
        if (v === "..") {
            return "$dot$dot";
        };
        if (v === ".") {
            return "$dot";
        };
        return v;
    })(runEscaper(nonEscaper)($242));
});
var unsafePrintPath = unsafePrintPath$prime(posixEscaper);
var printPath = unsafePrintPath;
var maybeRel = function (v) {
    if (v instanceof Current) {
        return new Data_Maybe.Just(Current.value);
    };
    if (v instanceof Root) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof ParentIn) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(ParentIn.create)(maybeRel(v.value0));
    };
    if (v instanceof FileIn) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(FileIn.create)(v.value1))(maybeRel(v.value0));
    };
    if (v instanceof DirIn) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(DirIn.create)(v.value1))(maybeRel(v.value0));
    };
    throw new Error("Failed pattern match at Data.Path.Pathy line 323, column 1 - line 323, column 32: " + [ v.constructor.name ]);
};
var maybeDir = function (v) {
    if (v instanceof Current) {
        return new Data_Maybe.Just(Current.value);
    };
    if (v instanceof Root) {
        return new Data_Maybe.Just(Root.value);
    };
    if (v instanceof ParentIn) {
        return Data_Maybe.Just.create(new ParentIn(unsafeCoerceType(v.value0)));
    };
    if (v instanceof FileIn) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof DirIn) {
        return Data_Maybe.Just.create(new DirIn(unsafeCoerceType(v.value0), v.value1));
    };
    throw new Error("Failed pattern match at Data.Path.Pathy line 307, column 1 - line 307, column 32: " + [ v.constructor.name ]);
};
var maybeAbs = function (v) {
    if (v instanceof Current) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Root) {
        return new Data_Maybe.Just(Root.value);
    };
    if (v instanceof ParentIn) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(ParentIn.create)(maybeAbs(v.value0));
    };
    if (v instanceof FileIn) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(FileIn.create)(v.value1))(maybeAbs(v.value0));
    };
    if (v instanceof DirIn) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(DirIn.create)(v.value1))(maybeAbs(v.value0));
    };
    throw new Error("Failed pattern match at Data.Path.Pathy line 331, column 1 - line 331, column 27: " + [ v.constructor.name ]);
};
var isAbsolute = function (__copy_v) {
    var __tco_done = false;
    var __tco_result;
    function __tco_loop(v) {
        if (v instanceof Current) {
            __tco_done = true;
            return false;
        };
        if (v instanceof Root) {
            __tco_done = true;
            return true;
        };
        if (v instanceof ParentIn) {
            __copy_v = v.value0;
            return;
        };
        if (v instanceof FileIn) {
            __copy_v = v.value0;
            return;
        };
        if (v instanceof DirIn) {
            __copy_v = v.value0;
            return;
        };
        throw new Error("Failed pattern match at Data.Path.Pathy line 279, column 1 - line 279, column 27: " + [ v.constructor.name ]);
    };
    while (!__tco_done) {
        __tco_result = __tco_loop(__copy_v);
    };
    return __tco_result;
};
var isRelative = function ($243) {
    return !isAbsolute($243);
};
var identicalPath = function (p1) {
    return function (p2) {
        return Data_Show.show(showPath)(p1) === Data_Show.show(showPath)(p2);
    };
};
var fileName = function (v) {
    if (v instanceof FileIn) {
        return v.value1;
    };
    return "";
};
var file$prime = function (f) {
    return new FileIn(Current.value, f);
};
var file = function (f) {
    return file$prime(f);
};
var extension = function (v) {
    var v1 = Data_String.lastIndexOf(".")(v);
    if (v1 instanceof Data_Maybe.Just) {
        return Data_String.drop(v1.value0 + 1 | 0)(v);
    };
    if (v1 instanceof Data_Maybe.Nothing) {
        return "";
    };
    throw new Error("Failed pattern match at Data.Path.Pathy line 200, column 26 - line 204, column 1: " + [ v1.constructor.name ]);
};
var eqFileName = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordFileName = new Data_Ord.Ord(function () {
    return eqFileName;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var eqDirName = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordDirName = new Data_Ord.Ord(function () {
    return eqDirName;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var dropExtension = function (v) {
    var v1 = Data_String.lastIndexOf(".")(v);
    if (v1 instanceof Data_Maybe.Just) {
        return FileName(Data_String.take(v1.value0)(v));
    };
    if (v1 instanceof Data_Maybe.Nothing) {
        return v;
    };
    throw new Error("Failed pattern match at Data.Path.Pathy line 206, column 30 - line 208, column 24: " + [ v1.constructor.name ]);
};
var dir$prime = function (d) {
    return new DirIn(Current.value, d);
};
var dir = function (d) {
    return dir$prime(d);
};
var depth = function (v) {
    if (v instanceof Current) {
        return 0;
    };
    if (v instanceof Root) {
        return 0;
    };
    if (v instanceof ParentIn) {
        return depth(v.value0) - 1 | 0;
    };
    if (v instanceof FileIn) {
        return depth(v.value0) + 1 | 0;
    };
    if (v instanceof DirIn) {
        return depth(v.value0) + 1 | 0;
    };
    throw new Error("Failed pattern match at Data.Path.Pathy line 340, column 1 - line 341, column 1: " + [ v.constructor.name ]);
};
var currentDir = Current.value;
var changeExtension = function (f) {
    return function (nm) {
        var update = function (v) {
            return function (v1) {
                if (v === "") {
                    return v1;
                };
                return FileName(v1 + ("." + v));
            };
        };
        return update(f(extension(nm)))(dropExtension(nm));
    };
};
var setExtension = function (p) {
    return function (ext) {
        return renameFile(changeExtension(Data_Function["const"](ext)))(p);
    };
};
var canonicalize$prime = function (v) {
    if (v instanceof Current) {
        return new Data_Tuple.Tuple(false, Current.value);
    };
    if (v instanceof Root) {
        return new Data_Tuple.Tuple(false, Root.value);
    };
    if (v instanceof ParentIn && v.value0 instanceof FileIn) {
        return new Data_Tuple.Tuple(true, Data_Tuple.snd(canonicalize$prime(v.value0.value0)));
    };
    if (v instanceof ParentIn && v.value0 instanceof DirIn) {
        return new Data_Tuple.Tuple(true, Data_Tuple.snd(canonicalize$prime(v.value0.value0)));
    };
    if (v instanceof ParentIn) {
        var v1 = canonicalize$prime(v.value0);
        var p$prime$prime = new ParentIn(v1.value1);
        if (v1.value0) {
            return canonicalize$prime(p$prime$prime);
        };
        return new Data_Tuple.Tuple(v1.value0, p$prime$prime);
    };
    if (v instanceof FileIn) {
        return Data_Functor.map(Data_Tuple.functorTuple)(Data_Function.flip(FileIn.create)(v.value1))(canonicalize$prime(v.value0));
    };
    if (v instanceof DirIn) {
        return Data_Functor.map(Data_Tuple.functorTuple)(Data_Function.flip(DirIn.create)(v.value1))(canonicalize$prime(v.value0));
    };
    throw new Error("Failed pattern match at Data.Path.Pathy line 393, column 1 - line 393, column 44: " + [ v.constructor.name ]);
};
var peel = function (__copy_v) {
    var __tco_done = false;
    var __tco_result;
    function __tco_loop(v) {
        if (v instanceof Current) {
            __tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof Root) {
            __tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof ParentIn) {
            var v1 = canonicalize$prime(v);
            if (v1.value0) {
                __copy_v = v1.value1;
                return;
            };
            __tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof DirIn) {
            __tco_done = true;
            return Data_Maybe.Just.create(new Data_Tuple.Tuple(unsafeCoerceType(v.value0), new Data_Either.Left(v.value1)));
        };
        if (v instanceof FileIn) {
            __tco_done = true;
            return Data_Maybe.Just.create(new Data_Tuple.Tuple(unsafeCoerceType(v.value0), new Data_Either.Right(v.value1)));
        };
        throw new Error("Failed pattern match at Data.Path.Pathy line 297, column 1 - line 297, column 23: " + [ v.constructor.name ]);
    };
    while (!__tco_done) {
        __tco_result = __tco_loop(__copy_v);
    };
    return __tco_result;
};
var parentDir = function (p) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(peel(p));
};
var canonicalize = function ($244) {
    return Data_Tuple.snd(canonicalize$prime($244));
};
var dirName = function (p) {
    var v = canonicalize(p);
    if (v instanceof DirIn) {
        return new Data_Maybe.Just(v.value1);
    };
    return Data_Maybe.Nothing.value;
};
var pathName = Data_Bifunctor.bimap(Data_Either.bifunctorEither)(dirName)(fileName);
var eqPath = new Data_Eq.Eq(function (p1) {
    return function (p2) {
        return identicalPath(canonicalize(p1))(canonicalize(p2));
    };
});
var ordPath = new Data_Ord.Ord(function () {
    return eqPath;
}, function (p1) {
    return function (p2) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Current && v1 instanceof Current) {
                    return Data_Ordering.EQ.value;
                };
                if (v instanceof Current) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Current) {
                    return Data_Ordering.GT.value;
                };
                if (v instanceof Root && v1 instanceof Root) {
                    return Data_Ordering.EQ.value;
                };
                if (v instanceof Root) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Root) {
                    return Data_Ordering.GT.value;
                };
                if (v instanceof ParentIn && v1 instanceof ParentIn) {
                    return Data_Ord.compare(ordPath)(v.value0)(v1.value0);
                };
                if (v instanceof ParentIn) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof ParentIn) {
                    return Data_Ordering.GT.value;
                };
                if (v instanceof DirIn && v1 instanceof DirIn) {
                    return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(Data_Ord.compare(ordPath)(v.value0)(v1.value0))(Data_Ord.compare(ordDirName)(v.value1)(v1.value1));
                };
                if (v instanceof DirIn) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof DirIn) {
                    return Data_Ordering.GT.value;
                };
                if (v instanceof FileIn && v1 instanceof FileIn) {
                    return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(Data_Ord.compare(ordPath)(v.value0)(v1.value0))(Data_Ord.compare(ordFileName)(v.value1)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.Path.Pathy line 536, column 5 - line 536, column 28: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return go(canonicalize(p1))(canonicalize(p2));
    };
});
var appendPath = function (v) {
    return function (v1) {
        if (v instanceof Current && v1 instanceof Current) {
            return Current.value;
        };
        if (v instanceof Root && v1 instanceof Current) {
            return Root.value;
        };
        if (v instanceof ParentIn && v1 instanceof Current) {
            return new ParentIn(appendPath(v.value0)(Current.value));
        };
        if (v instanceof FileIn && v1 instanceof Current) {
            return new FileIn(appendPath(v.value0)(Current.value), v.value1);
        };
        if (v instanceof DirIn && v1 instanceof Current) {
            return new DirIn(appendPath(v.value0)(Current.value), v.value1);
        };
        if (v1 instanceof ParentIn) {
            return new ParentIn(appendPath(v)(v1.value0));
        };
        if (v1 instanceof FileIn) {
            return new FileIn(appendPath(v)(v1.value0), v1.value1);
        };
        if (v1 instanceof DirIn) {
            return new DirIn(appendPath(v)(v1.value0), v1.value1);
        };
        if (v instanceof Current && v1 instanceof Root) {
            return Current.value;
        };
        if (v instanceof Root && v1 instanceof Root) {
            return Root.value;
        };
        if (v instanceof ParentIn && v1 instanceof Root) {
            return new ParentIn(appendPath(v.value0)(Current.value));
        };
        if (v instanceof FileIn && v1 instanceof Root) {
            return new FileIn(appendPath(v.value0)(Current.value), v.value1);
        };
        if (v instanceof DirIn && v1 instanceof Root) {
            return new DirIn(appendPath(v.value0)(Current.value), v.value1);
        };
        throw new Error("Failed pattern match at Data.Path.Pathy line 238, column 1 - line 238, column 37: " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var maybeFile = function (v) {
    if (v instanceof Current) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Root) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof ParentIn) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof FileIn) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(appendPath)(maybeDir(v.value0)))(new Data_Maybe.Just(file$prime(v.value1)));
    };
    if (v instanceof DirIn) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Path.Pathy line 315, column 1 - line 315, column 28: " + [ v.constructor.name ]);
};
var parentAppend = function (d) {
    return function (p) {
        return appendPath(parentDir$prime(d))(unsandbox(p));
    };
};
var relativeTo = function (p1) {
    return function (p2) {
        var relativeTo$prime = function (v) {
            return function (v1) {
                if (v instanceof Root && v1 instanceof Root) {
                    return new Data_Maybe.Just(Current.value);
                };
                if (v instanceof Current && v1 instanceof Current) {
                    return new Data_Maybe.Just(Current.value);
                };
                if (identicalPath(v)(v1)) {
                    return new Data_Maybe.Just(Current.value);
                };
                if (Data_Boolean.otherwise) {
                    var v2 = peel(v);
                    if (v2 instanceof Data_Maybe.Just) {
                        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(appendPath)(Data_Either.either(DirIn.create(Current.value))(FileIn.create(Current.value))(v2.value0.value1)))(relativeTo$prime(v2.value0.value0)(v1));
                    };
                    if (v2 instanceof Data_Maybe.Nothing) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at Data.Path.Pathy line 449, column 19 - line 452, column 27: " + [ v2.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.Path.Pathy line 445, column 3 - line 445, column 39: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return relativeTo$prime(canonicalize(p1))(canonicalize(p2));
    };
};
var sandbox = function (p1) {
    return function (p2) {
        return relativeTo(p2)(p1);
    };
};
module.exports = {
    DirName: DirName, 
    Escaper: Escaper, 
    FileName: FileName, 
    appendPath: appendPath, 
    canonicalize: canonicalize, 
    changeExtension: changeExtension, 
    currentDir: currentDir, 
    depth: depth, 
    dir: dir, 
    "dir'": dir$prime, 
    dirName: dirName, 
    dropExtension: dropExtension, 
    extension: extension, 
    file: file, 
    "file'": file$prime, 
    fileName: fileName, 
    identicalPath: identicalPath, 
    isAbsolute: isAbsolute, 
    isRelative: isRelative, 
    maybeAbs: maybeAbs, 
    maybeDir: maybeDir, 
    maybeFile: maybeFile, 
    maybeRel: maybeRel, 
    parentAppend: parentAppend, 
    parentDir: parentDir, 
    "parentDir'": parentDir$prime, 
    parseAbsDir: parseAbsDir, 
    parseAbsFile: parseAbsFile, 
    parsePath: parsePath, 
    parseRelDir: parseRelDir, 
    parseRelFile: parseRelFile, 
    pathName: pathName, 
    peel: peel, 
    posixEscaper: posixEscaper, 
    printPath: printPath, 
    "printPath'": printPath$prime, 
    refine: refine, 
    relativeTo: relativeTo, 
    renameDir: renameDir, 
    renameFile: renameFile, 
    rootDir: rootDir, 
    runDirName: runDirName, 
    runEscaper: runEscaper, 
    runFileName: runFileName, 
    sandbox: sandbox, 
    setExtension: setExtension, 
    unsafePrintPath: unsafePrintPath, 
    "unsafePrintPath'": unsafePrintPath$prime, 
    unsandbox: unsandbox, 
    showPath: showPath, 
    eqPath: eqPath, 
    ordPath: ordPath, 
    showFileName: showFileName, 
    eqFileName: eqFileName, 
    ordFileName: ordFileName, 
    showDirName: showDirName, 
    eqDirName: eqDirName, 
    ordDirName: ordDirName
};
