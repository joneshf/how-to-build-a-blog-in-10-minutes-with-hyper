// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Data_Array = require("../Data.Array");
var Data_Either = require("../Data.Either");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_String_Regex = require("../Data.String.Regex");
var Data_String_Regex_Flags = require("../Data.String.Regex.Flags");
var Data_Traversable = require("../Data.Traversable");
var Data_Unfoldable = require("../Data.Unfoldable");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Text_Parsing_StringParser = require("../Text.Parsing.StringParser");
var Text_Parsing_StringParser_String = require("../Text.Parsing.StringParser.String");
var wrapParser = function (outer) {
    return function (inner) {
        return function (ps) {
            return Control_Bind.bind(Data_Either.bindEither)(Text_Parsing_StringParser.unParser(inner)(ps))(function (v) {
                return Control_Bind.bind(Data_Either.bindEither)(Text_Parsing_StringParser.unParser(outer)({
                    str: v.result, 
                    pos: 0
                }))(function (v1) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)({
                        result: v1.result, 
                        suffix: v.suffix
                    });
                });
            });
        };
    };
};
var rep = function (n) {
    return function (p) {
        return Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_String.joinWith(""))(Data_Unfoldable.replicateA(Text_Parsing_StringParser.applicativeParser)(Data_Unfoldable.unfoldableArray)(Data_Traversable.traversableArray)(n)(p));
    };
};
var match1From = $foreign.match1FromImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var joinWith = function (x) {
    return function (y) {
        return Data_String.joinWith(x)(Data_Array.fromFoldable(Data_List_Types.foldableList)(y));
    };
};
var anyMatch = function (rx) {
    return function (v) {
        var v1 = match1From(rx)(v.pos)(v.str);
        if (v1 instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(Data_Either.applicativeEither)({
                result: v1.value0, 
                suffix: {
                    str: v.str, 
                    pos: v.pos + Data_String.length(v1.value0) | 0
                }
            });
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            return new Data_Either.Left({
                error: Text_Parsing_StringParser.ParseError.create("Expected " + Data_Show.show(Data_String_Regex.showRegex)(rx)), 
                pos: v.pos
            });
        };
        throw new Error("Failed pattern match at Data.URI.Common line 54, column 46 - line 56, column 74: " + [ v1.constructor.name ]);
    };
};
var rxPat = function (rx) {
    return Data_Either.fromRight()(Data_Functor.map(Data_Either.functorEither)(anyMatch)(Data_String_Regex.regex(rx)(Data_String_Regex_Flags.ignoreCase)));
};
var parsePCTEncoded = rxPat("%[0-9a-f]{2}");
var parseSubDelims = rxPat("[!$&'()*+;=]");
var parseUnreserved = rxPat("[0-9a-z\\-\\._~]+");
var parsePChar = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(parseUnreserved)(parsePCTEncoded))(parseSubDelims))(Text_Parsing_StringParser_String.string(":")))(Text_Parsing_StringParser_String.string("@"));
module.exports = {
    anyMatch: anyMatch, 
    joinWith: joinWith, 
    match1From: match1From, 
    parsePCTEncoded: parsePCTEncoded, 
    parsePChar: parsePChar, 
    parseSubDelims: parseSubDelims, 
    parseUnreserved: parseUnreserved, 
    rep: rep, 
    rxPat: rxPat, 
    wrapParser: wrapParser, 
    match1FromImpl: $foreign.match1FromImpl
};
