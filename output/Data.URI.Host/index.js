// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_URI_Common = require("../Data.URI.Common");
var Data_URI_Types = require("../Data.URI.Types");
var Prelude = require("../Prelude");
var Text_Parsing_StringParser = require("../Text.Parsing.StringParser");
var Text_Parsing_StringParser_Combinators = require("../Text.Parsing.StringParser.Combinators");
var Text_Parsing_StringParser_String = require("../Text.Parsing.StringParser.String");
var printHost = function (v) {
    if (v instanceof Data_URI_Types.IPv6Address) {
        return "[" + (v.value0 + "]");
    };
    if (v instanceof Data_URI_Types.IPv4Address) {
        return v.value0;
    };
    if (v instanceof Data_URI_Types.NameAddress) {
        return v.value0;
    };
    throw new Error("Failed pattern match at Data.URI.Host line 51, column 1 - line 52, column 1: " + [ v.constructor.name ]);
};
var parseRegName = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_URI_Types.NameAddress.create)(Text_Parsing_StringParser["try"](Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_URI_Common.joinWith(""))(Text_Parsing_StringParser_Combinators.many1(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_URI_Common.parseUnreserved)(Data_URI_Common.parsePCTEncoded))(Data_URI_Common.parseSubDelims)))));
var parseIPv6Address = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_URI_Types.IPv6Address.create)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.string("["))(Data_URI_Common.rxPat("[a-f0-9\\.:]+")))(Text_Parsing_StringParser_String.string("]"))))("IPv6 address");
var parseIPv4Address = (function () {
    var octet = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Data_URI_Common.rxPat("0|([1-9][0-9]{0,2})"))(function (v) {
        var v1 = Data_Int.fromString(v);
        if (v1 instanceof Data_Maybe.Just && (v1.value0 >= 0 && v1.value0 <= 255)) {
            return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v1.value0);
        };
        return Text_Parsing_StringParser.fail("Invalid IPv4 address octet");
    });
    var parse = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(octet)(function (v) {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String["char"]("."))(function (v1) {
            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(octet)(function (v2) {
                return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String["char"]("."))(function (v3) {
                    return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(octet)(function (v4) {
                        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String["char"]("."))(function (v5) {
                            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(octet)(function (v6) {
                                return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Show.show(Data_Show.showInt)(v) + ("." + (Data_Show.show(Data_Show.showInt)(v2) + ("." + (Data_Show.show(Data_Show.showInt)(v4) + ("." + Data_Show.show(Data_Show.showInt)(v6)))))));
                            });
                        });
                    });
                });
            });
        });
    });
    return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_URI_Types.IPv4Address.create)(parse))("IPv4 address");
})();
var parseHost = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(parseIPv6Address)(parseIPv4Address))(parseRegName);
module.exports = {
    parseHost: parseHost, 
    parseIPv4Address: parseIPv4Address, 
    parseIPv6Address: parseIPv6Address, 
    parseRegName: parseRegName, 
    printHost: printHost
};
