// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class");
var Control_Monad_Except = require("../Control.Monad.Except");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array = require("../Data.Array");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Boolean = require("../Data.Boolean");
var Data_ByteString = require("../Data.ByteString");
var Data_DateTime_Instant = require("../Data.DateTime.Instant");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Foreign = require("../Data.Foreign");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Newtype = require("../Data.Newtype");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Tuple_Nested = require("../Data.Tuple.Nested");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var Query = function (x) {
    return x;
};
var ToSQLRow = function (toSQLRow) {
    this.toSQLRow = toSQLRow;
};
var FromSQLRow = function (fromSQLRow) {
    this.fromSQLRow = fromSQLRow;
};
var ToSQLValue = function (toSQLValue) {
    this.toSQLValue = toSQLValue;
};
var FromSQLValue = function (fromSQLValue) {
    this.fromSQLValue = fromSQLValue;
};
var toSQLValueString = new ToSQLValue(Data_Foreign.toForeign);
var toSQLValueNumber = new ToSQLValue(Data_Foreign.toForeign);
var toSQLValueInt = new ToSQLValue(Data_Foreign.toForeign);
var toSQLValueInstant = new ToSQLValue($foreign.instantToString);
var toSQLValueChar = new ToSQLValue(Data_Foreign.toForeign);
var toSQLValueByteString = new ToSQLValue(Data_Foreign.toForeign);
var toSQLValueBoolean = new ToSQLValue(Data_Foreign.toForeign);
var toSQLValue = function (dict) {
    return dict.toSQLValue;
};
var toSQLValueMaybe = function (dictToSQLValue) {
    return new ToSQLValue(function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return $foreign["null"];
        };
        if (v instanceof Data_Maybe.Just) {
            return toSQLValue(dictToSQLValue)(v.value0);
        };
        throw new Error("Failed pattern match at Database.PostgreSQL line 148, column 5 - line 148, column 30: " + [ v.constructor.name ]);
    });
};
var toSQLRowUnit = new ToSQLRow(function (v) {
    return [  ];
});
var toSQLRow = function (dict) {
    return dict.toSQLRow;
};
var toSQLRowTuple = function (dictToSQLValue) {
    return function (dictToSQLRow) {
        return new ToSQLRow(function (v) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ toSQLValue(dictToSQLValue)(v.value0) ])(toSQLRow(dictToSQLRow)(v.value1));
        });
    };
};
var newtypeQuery = new Data_Newtype.Newtype(function (n) {
    return n;
}, Query);
var fromSQLValueString = new FromSQLValue(function ($53) {
    return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError)))(Control_Monad_Except.runExcept(Data_Foreign.readString($53)));
});
var fromSQLValueNumber = new FromSQLValue(function ($54) {
    return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError)))(Control_Monad_Except.runExcept(Data_Foreign.readNumber($54)));
});
var fromSQLValueInt = new FromSQLValue(function ($55) {
    return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError)))(Control_Monad_Except.runExcept(Data_Foreign.readInt($55)));
});
var fromSQLValueChar = new FromSQLValue(function ($56) {
    return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError)))(Control_Monad_Except.runExcept(Data_Foreign.readChar($56)));
});
var fromSQLValueByteString = new FromSQLValue(function (x) {
    if ($foreign.unsafeIsBuffer(x)) {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Foreign.unsafeFromForeign(x));
    };
    if (Data_Boolean.otherwise) {
        return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)("FromSQLValue ByteString: not a buffer");
    };
    throw new Error("Failed pattern match at Database.PostgreSQL line 140, column 5 - line 144, column 1: " + [ x.constructor.name ]);
});
var fromSQLValueBoolean = new FromSQLValue(function ($57) {
    return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError)))(Control_Monad_Except.runExcept(Data_Foreign.readBoolean($57)));
});
var fromSQLValue = function (dict) {
    return dict.fromSQLValue;
};
var fromSQLValueArray = function (dictFromSQLValue) {
    return new FromSQLValue(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(fromSQLValue(dictFromSQLValue)))(function ($58) {
        return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError)))(Control_Monad_Except.runExcept(Data_Foreign.readArray($58)));
    }));
};
var fromSQLValueList = function (dictFromSQLValue) {
    return new FromSQLValue(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function ($59) {
        return Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(fromSQLValue(dictFromSQLValue))($59));
    })(function ($60) {
        return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError)))(Control_Monad_Except.runExcept(Data_Foreign.readArray($60)));
    }));
};
var fromSQLValueMaybe = function (dictFromSQLValue) {
    return new FromSQLValue(function (x) {
        if (Data_Foreign.isNull(x)) {
            return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
        };
        if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(fromSQLValue(dictFromSQLValue)(x));
        };
        throw new Error("Failed pattern match at Database.PostgreSQL line 152, column 5 - line 153, column 57: " + [ x.constructor.name ]);
    });
};
var fromSQLRowUnit = new FromSQLRow(function (v) {
    if (v.length === 0) {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit);
    };
    return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)("FromSQLRow: row has too many columns");
});
var fromSQLRow = function (dict) {
    return dict.fromSQLRow;
};
var fromSQLRowTuple = function (dictFromSQLValue) {
    return function (dictFromSQLRow) {
        return new FromSQLRow(function ($61) {
            return (function (v) {
                if (v instanceof Data_Maybe.Just) {
                    return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create)(fromSQLValue(dictFromSQLValue)(v.value0.head)))(fromSQLRow(dictFromSQLRow)(v.value0.tail));
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)("FromSQLRow: row has too few columns");
                };
                throw new Error("Failed pattern match at Database.PostgreSQL line 96, column 29 - line 100, column 1: " + [ v.constructor.name ]);
            })(Data_Array.uncons($61));
        });
    };
};
var query = function (dictToSQLRow) {
    return function (dictFromSQLRow) {
        return function (conn) {
            return function (v) {
                return function (values) {
                    return Control_Bind.bind(Control_Monad_Aff.bindAff)($foreign._query(conn)(v)(toSQLRow(dictToSQLRow)(values)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Aff.applicativeAff)(function ($62) {
                        return (function (v1) {
                            if (v1 instanceof Data_Either.Right) {
                                return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1.value0);
                            };
                            if (v1 instanceof Data_Either.Left) {
                                return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error(v1.value0));
                            };
                            throw new Error("Failed pattern match at Database.PostgreSQL line 209, column 34 - line 211, column 46: " + [ v1.constructor.name ]);
                        })(fromSQLRow(dictFromSQLRow)($62));
                    }));
                };
            };
        };
    };
};
var scalar = function (dictToSQLRow) {
    return function (dictFromSQLValue) {
        return function (conn) {
            return function (sql) {
                return function (values) {
                    return Data_Functor.mapFlipped(Control_Monad_Aff.functorAff)(query(dictToSQLRow)(fromSQLRowTuple(dictFromSQLValue)(fromSQLRowUnit))(conn)(sql)(values))(function ($63) {
                        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(Data_Array.head($63));
                    });
                };
            };
        };
    };
};
var fromRight = function (v) {
    if (v instanceof Data_Either.Left) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_Either.Right) {
        return new Data_Maybe.Just(v.value0);
    };
    throw new Error("Failed pattern match at Database.PostgreSQL line 233, column 1 - line 233, column 29: " + [ v.constructor.name ]);
};
var execute = function (dictToSQLRow) {
    return function (conn) {
        return function (v) {
            return function (values) {
                return Data_Functor["void"](Control_Monad_Aff.functorAff)($foreign._query(conn)(v)(toSQLRow(dictToSQLRow)(values)));
            };
        };
    };
};
var withTransaction = function (conn) {
    return function (action) {
        return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Apply.applySecond(Control_Monad_Aff.applyAff)(execute(toSQLRowUnit)(conn)("BEGIN TRANSACTION")(Data_Unit.unit))(Control_Monad_Error_Class.catchError(Control_Monad_Aff.monadErrorAff)(Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Either.Right.create)(action))(function ($64) {
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Either.Left.create($64));
        })))(function (v) {
            if (v instanceof Data_Either.Right) {
                return Data_Functor.voidLeft(Control_Monad_Aff.functorAff)(execute(toSQLRowUnit)(conn)("COMMIT TRANSACTION")(Data_Unit.unit))(v.value0);
            };
            if (v instanceof Data_Either.Left) {
                return Control_Apply.applySecond(Control_Monad_Aff.applyAff)(execute(toSQLRowUnit)(conn)("ROLLBACK TRANSACTION")(Data_Unit.unit))(Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(v.value0));
            };
            throw new Error("Failed pattern match at Database.PostgreSQL line 183, column 58 - line 185, column 83: " + [ v.constructor.name ]);
        });
    };
};
module.exports = {
    Query: Query, 
    FromSQLRow: FromSQLRow, 
    FromSQLValue: FromSQLValue, 
    ToSQLRow: ToSQLRow, 
    ToSQLValue: ToSQLValue, 
    execute: execute, 
    fromSQLRow: fromSQLRow, 
    fromSQLValue: fromSQLValue, 
    query: query, 
    scalar: scalar, 
    toSQLRow: toSQLRow, 
    toSQLValue: toSQLValue, 
    withTransaction: withTransaction, 
    newtypeQuery: newtypeQuery, 
    toSQLRowUnit: toSQLRowUnit, 
    toSQLRowTuple: toSQLRowTuple, 
    fromSQLRowUnit: fromSQLRowUnit, 
    fromSQLRowTuple: fromSQLRowTuple, 
    toSQLValueBoolean: toSQLValueBoolean, 
    fromSQLValueBoolean: fromSQLValueBoolean, 
    toSQLValueChar: toSQLValueChar, 
    fromSQLValueChar: fromSQLValueChar, 
    toSQLValueInt: toSQLValueInt, 
    fromSQLValueInt: fromSQLValueInt, 
    toSQLValueNumber: toSQLValueNumber, 
    fromSQLValueNumber: fromSQLValueNumber, 
    toSQLValueString: toSQLValueString, 
    fromSQLValueString: fromSQLValueString, 
    fromSQLValueArray: fromSQLValueArray, 
    fromSQLValueList: fromSQLValueList, 
    toSQLValueByteString: toSQLValueByteString, 
    fromSQLValueByteString: fromSQLValueByteString, 
    toSQLValueInstant: toSQLValueInstant, 
    toSQLValueMaybe: toSQLValueMaybe, 
    fromSQLValueMaybe: fromSQLValueMaybe, 
    newPool: $foreign.newPool, 
    withConnection: $foreign.withConnection
};
