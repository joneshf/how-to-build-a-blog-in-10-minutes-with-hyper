// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class");
var Data_Array = require("../Data.Array");
var Data_Either = require("../Data.Either");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Generic = require("../Data.Generic");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Int = require("../Data.Int");
var Data_List = require("../Data.List");
var Data_List_NonEmpty = require("../Data.List.NonEmpty");
var Data_List_Types = require("../Data.List.Types");
var Data_Map = require("../Data.Map");
var Data_Maybe = require("../Data.Maybe");
var Data_MediaType = require("../Data.MediaType");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var Literal = (function () {
    function Literal(value0) {
        this.value0 = value0;
    };
    Literal.create = function (value0) {
        return new Literal(value0);
    };
    return Literal;
})();
var Wildcard = (function () {
    function Wildcard() {

    };
    Wildcard.value = new Wildcard();
    return Wildcard;
})();
var MediaRange = (function () {
    function MediaRange(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    MediaRange.create = function (value0) {
        return function (value1) {
            return new MediaRange(value0, value1);
        };
    };
    return MediaRange;
})();
var AcceptParams = (function () {
    function AcceptParams(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AcceptParams.create = function (value0) {
        return function (value1) {
            return new AcceptParams(value0, value1);
        };
    };
    return AcceptParams;
})();
var AcceptEntry = (function () {
    function AcceptEntry(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AcceptEntry.create = function (value0) {
        return function (value1) {
            return new AcceptEntry(value0, value1);
        };
    };
    return AcceptEntry;
})();
var AcceptHeader = function (x) {
    return x;
};
var Match = (function () {
    function Match(value0) {
        this.value0 = value0;
    };
    Match.create = function (value0) {
        return new Match(value0);
    };
    return Match;
})();
var Default = (function () {
    function Default(value0) {
        this.value0 = value0;
    };
    Default.create = function (value0) {
        return new Default(value0);
    };
    return Default;
})();
var NotAcceptable = (function () {
    function NotAcceptable(value0) {
        this.value0 = value0;
    };
    NotAcceptable.create = function (value0) {
        return new NotAcceptable(value0);
    };
    return NotAcceptable;
})();
var sortEntriesByQuality = (function () {
    var comparison = function (v) {
        return function (v1) {
            return Data_Ord.compare(Data_Ord.ordNumber)(v1.value1.value0)(v.value1.value0);
        };
    };
    return Data_Array.sortBy(comparison);
})();
var showAcceptParams = new Data_Show.Show(function (v) {
    return "AcceptParams (" + (Data_Show.show(Data_Show.showNumber)(v.value0) + (") (" + (Data_Show.show(Data_Map.showMap(Data_Show.showString)(Data_Show.showString))(v.value1) + ")")));
});
var parseAcceptHeader = function (x) {
    var parseType = function (v) {
        if (v === "*") {
            return Wildcard.value;
        };
        return new Literal(v);
    };
    var parseRange = function (s) {
        var v = Data_String.split("/")(s);
        if (v.length === 2) {
            return Control_Applicative.pure(Data_Either.applicativeEither)(new MediaRange(parseType(v[0]), parseType(v[1])));
        };
        return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)("Invalid Accept header range: " + s);
    };
    var parseParam = function (s) {
        var v = Data_Functor.map(Data_Functor.functorArray)(Data_String.trim)(Data_String.split("=")(s));
        if (v.length === 2) {
            return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Tuple.Tuple(v[0], v[1]));
        };
        return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)("Invalid parameter: " + s);
    };
    var parseEntry = function (s) {
        var v = Data_Array.uncons(Data_Functor.map(Data_Functor.functorArray)(Data_String.trim)(Data_String.split(";")(s)));
        if (v instanceof Data_Maybe.Just) {
            return Control_Bind.bind(Data_Either.bindEither)(parseRange(v.value0.head))(function (v1) {
                return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Map.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(parseParam)(v.value0.tail)))(function (v2) {
                    var q = Data_Maybe.fromMaybe(1.0)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Int.toNumber)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map.lookup(Data_Ord.ordString)("q")(v2))(Data_Int.fromString)));
                    return Control_Applicative.pure(Data_Either.applicativeEither)(new AcceptEntry(v1, new AcceptParams(q, v2)));
                });
            });
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)("Invalid Accept header entry: " + s);
        };
        throw new Error("Failed pattern match at Hyper.ContentNegotiation line 92, column 7 - line 101, column 60: " + [ v.constructor.name ]);
    };
    var parseHeader = function (s) {
        return Data_Functor.map(Data_Either.functorEither)(AcceptHeader)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(parseEntry)(Data_Functor.map(Data_Functor.functorArray)(Data_String.trim)(Data_String.split(",")(s))));
    };
    return parseHeader(x);
};
var newtypeAcceptHeader = new Data_Newtype.Newtype(function (n) {
    return n;
}, AcceptHeader);
var matching = function (v) {
    return function (v1) {
        var matchesRangeType = function (s) {
            return function (v2) {
                if (v2 instanceof Literal) {
                    return s === v2.value0;
                };
                if (v2 instanceof Wildcard) {
                    return true;
                };
                throw new Error("Failed pattern match at Hyper.ContentNegotiation line 137, column 7 - line 139, column 25: " + [ v2.constructor.name ]);
            };
        };
        var v2 = Data_String.split("/")(v1.value0);
        if (v2.length === 2) {
            return matchesRangeType(v2[0])(v.value0.value0) && matchesRangeType(v2[1])(v.value0.value1);
        };
        return true;
    };
};
var negotiateContent = function (accept) {
    return function (responses) {
        var responseList = Data_List_NonEmpty.toList(responses);
        var matches = function (entries) {
            return Control_Bind.bind(Control_Bind.bindArray)(entries)(function (v) {
                var v1 = Data_Foldable.find(Data_List_Types.foldableList)(matching(v))(responseList);
                if (v1 instanceof Data_Maybe.Just) {
                    return [ v1.value0 ];
                };
                if (v1 instanceof Data_Maybe.Nothing) {
                    return [  ];
                };
                throw new Error("Failed pattern match at Hyper.ContentNegotiation line 179, column 7 - line 181, column 21: " + [ v1.constructor.name ]);
            });
        };
        if (accept instanceof Data_Maybe.Just) {
            return Data_Maybe.fromMaybe(new NotAcceptable(accept.value0))(Data_Functor.map(Data_Maybe.functorMaybe)(Match.create)(Data_Array.head(matches(sortEntriesByQuality(accept.value0)))));
        };
        if (accept instanceof Data_Maybe.Nothing) {
            return new Default(Data_List_NonEmpty.head(responses));
        };
        throw new Error("Failed pattern match at Hyper.ContentNegotiation line 167, column 3 - line 174, column 31: " + [ accept.constructor.name ]);
    };
};
var genericMediaRangeType = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Hyper.ContentNegotiation.Literal" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Literal.create))(Data_Generic.fromSpine(Data_Generic.genericString)(v["value1"][0](Data_Unit.unit)));
    };
    if (v instanceof Data_Generic.SProd && (v.value0 === "Hyper.ContentNegotiation.Wildcard" && v.value1.length === 0)) {
        return new Data_Maybe.Just(Wildcard.value);
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Hyper.ContentNegotiation.MediaRangeType", [ {
        sigConstructor: "Hyper.ContentNegotiation.Literal", 
        sigValues: [ function ($dollarq1) {
            return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
        } ]
    }, {
        sigConstructor: "Hyper.ContentNegotiation.Wildcard", 
        sigValues: [  ]
    } ]);
}, function (v) {
    if (v instanceof Literal) {
        return new Data_Generic.SProd("Hyper.ContentNegotiation.Literal", [ function ($dollarq) {
            return Data_Generic.toSpine(Data_Generic.genericString)(v.value0);
        } ]);
    };
    if (v instanceof Wildcard) {
        return new Data_Generic.SProd("Hyper.ContentNegotiation.Wildcard", [  ]);
    };
    throw new Error("Failed pattern match at Hyper.ContentNegotiation line 42, column 1 - line 42, column 64: " + [ v.constructor.name ]);
});
var showMediaRangeType = new Data_Show.Show(Data_Generic.gShow(genericMediaRangeType));
var genericMediaRange = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Hyper.ContentNegotiation.MediaRange" && v.value1.length === 2)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(MediaRange.create))(Data_Generic.fromSpine(genericMediaRangeType)(v["value1"][0](Data_Unit.unit))))(Data_Generic.fromSpine(genericMediaRangeType)(v["value1"][1](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Hyper.ContentNegotiation.MediaRange", [ {
        sigConstructor: "Hyper.ContentNegotiation.MediaRange", 
        sigValues: [ function ($dollarq1) {
            return Data_Generic.toSignature(genericMediaRangeType)(Data_Generic.anyProxy);
        }, function ($dollarq1) {
            return Data_Generic.toSignature(genericMediaRangeType)(Data_Generic.anyProxy);
        } ]
    } ]);
}, function (v) {
    return new Data_Generic.SProd("Hyper.ContentNegotiation.MediaRange", [ function ($dollarq) {
        return Data_Generic.toSpine(genericMediaRangeType)(v.value0);
    }, function ($dollarq) {
        return Data_Generic.toSpine(genericMediaRangeType)(v.value1);
    } ]);
});
var showMediaRange = new Data_Show.Show(Data_Generic.gShow(genericMediaRange));
var showAcceptEntry = new Data_Show.Show(function (v) {
    return "AcceptEntry (" + (Data_Show.show(showMediaRange)(v.value0) + (") (" + (Data_Show.show(showAcceptParams)(v.value1) + ")")));
});
var showAcceptHeader = new Data_Show.Show(function (h) {
    return "AcceptHeader (" + (Data_Show.show(Data_Show.showArray(showAcceptEntry))(Data_Newtype.unwrap(newtypeAcceptHeader)(h)) + ")");
});
var showNegotiationResult = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof Match) {
            return "Match (" + (Data_Show.show(Data_MediaType.showMediaType)(v.value0.value0) + (" " + (Data_Show.show(dictShow)(v.value0.value1) + ")")));
        };
        if (v instanceof Default) {
            return "Default (" + (Data_Show.show(Data_MediaType.showMediaType)(v.value0.value0) + (" " + (Data_Show.show(dictShow)(v.value0.value1) + ")")));
        };
        if (v instanceof NotAcceptable) {
            return "NotAcceptable (" + (Data_Show.show(showAcceptHeader)(v.value0) + ")");
        };
        throw new Error("Failed pattern match at Hyper.ContentNegotiation line 156, column 5 - line 161, column 1: " + [ v.constructor.name ]);
    });
};
var eqMediaRangeType = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Literal && y instanceof Literal) {
            return x.value0 === y.value0;
        };
        if (x instanceof Wildcard && y instanceof Wildcard) {
            return true;
        };
        return false;
    };
});
var eqMediaRange = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(eqMediaRangeType)(x.value0)(y.value0) && Data_Eq.eq(eqMediaRangeType)(x.value1)(y.value1);
    };
});
var eqAcceptParams = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.value0 === y.value0 && Data_Eq.eq(Data_Map.eqMap(Data_Eq.eqString)(Data_Eq.eqString))(x.value1)(y.value1);
    };
});
var eqAcceptEntry = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(eqMediaRange)(x.value0)(y.value0) && Data_Eq.eq(eqAcceptParams)(x.value1)(y.value1);
    };
});
var eqAcceptHeader = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Eq.eqArray(eqAcceptEntry))(x)(y);
    };
});
var eqNegotiationResult = function (dictEq) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            if (v instanceof Match && v1 instanceof Match) {
                return Data_Eq.eq(Data_Tuple.eqTuple(Data_MediaType.eqMediaType)(dictEq))(v.value0)(v1.value0);
            };
            if (v instanceof Default && v1 instanceof Default) {
                return Data_Eq.eq(Data_Tuple.eqTuple(Data_MediaType.eqMediaType)(dictEq))(v.value0)(v1.value0);
            };
            if (v instanceof NotAcceptable && v1 instanceof NotAcceptable) {
                return Data_Eq.eq(eqAcceptHeader)(v.value0)(v1.value0);
            };
            return false;
        };
    });
};
var acceptAll = [ new AcceptEntry(new MediaRange(Wildcard.value, Wildcard.value), new AcceptParams(1.0, Data_Map.empty)) ];
module.exports = {
    AcceptEntry: AcceptEntry, 
    AcceptHeader: AcceptHeader, 
    AcceptParams: AcceptParams, 
    MediaRange: MediaRange, 
    Literal: Literal, 
    Wildcard: Wildcard, 
    Match: Match, 
    Default: Default, 
    NotAcceptable: NotAcceptable, 
    acceptAll: acceptAll, 
    negotiateContent: negotiateContent, 
    parseAcceptHeader: parseAcceptHeader, 
    eqMediaRangeType: eqMediaRangeType, 
    genericMediaRangeType: genericMediaRangeType, 
    showMediaRangeType: showMediaRangeType, 
    eqMediaRange: eqMediaRange, 
    genericMediaRange: genericMediaRange, 
    showMediaRange: showMediaRange, 
    eqAcceptParams: eqAcceptParams, 
    showAcceptParams: showAcceptParams, 
    eqAcceptEntry: eqAcceptEntry, 
    showAcceptEntry: showAcceptEntry, 
    eqAcceptHeader: eqAcceptHeader, 
    newtypeAcceptHeader: newtypeAcceptHeader, 
    showAcceptHeader: showAcceptHeader, 
    eqNegotiationResult: eqNegotiationResult, 
    showNegotiationResult: showNegotiationResult
};
