// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_IxMonad = require("../Control.IxMonad");
var Control_Monad = require("../Control.Monad");
var Control_Monad_Eff_Class = require("../Control.Monad.Eff.Class");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Tuple = require("../Data.Tuple");
var Data_Unit = require("../Data.Unit");
var Hyper_Middleware_Class = require("../Hyper.Middleware.Class");
var Prelude = require("../Prelude");
var Middleware = function (x) {
    return x;
};
var runMiddleware = function (v) {
    return function (x) {
        return v(x);
    };
};
var lift$prime = function (dictMonad) {
    return function (a) {
        return Middleware(function (s) {
            return Control_Bind.bind(dictMonad.Bind1())(a)(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, s));
            });
        });
    };
};
var ixMonadMiddlewareMiddleware = function (dictApplicative) {
    return new Hyper_Middleware_Class.IxMonadMiddleware(Middleware(function (c) {
        return Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(c, c));
    }), function (c) {
        return Middleware(function (v) {
            return Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(Data_Unit.unit, c));
        });
    });
};
var ixMonadMiddleware = function (dictMonad) {
    return new Control_IxMonad.IxMonad(function (v) {
        return function (f) {
            return Middleware(function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                    var v2 = f(v1.value0);
                    return v2(v1.value1);
                });
            });
        };
    }, function (x) {
        return Middleware(function (s) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
        });
    });
};
var hoistMiddleware = function (f) {
    return function (v) {
        return function ($44) {
            return f(v($44));
        };
    };
};
var functorMiddleware = function (dictMonad) {
    return new Data_Functor.Functor(function (f) {
        return function (a) {
            return Middleware(function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(runMiddleware(a)(s))(function (v) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(f(v.value0), v.value1));
                });
            });
        };
    });
};
var evalMiddleware = function (dictFunctor) {
    return function (a) {
        return function (s) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(runMiddleware(a)(s));
        };
    };
};
var applyMiddleware = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorMiddleware(dictMonad);
    }, function (f) {
        return function (a) {
            return Middleware(function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(runMiddleware(f)(s))(function (v) {
                    return Control_Bind.bind(dictMonad.Bind1())(runMiddleware(a)(v.value1))(function (v1) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v.value0(v1.value0), v1.value1));
                    });
                });
            });
        };
    });
};
var bindMiddleware = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyMiddleware(dictMonad);
    }, Control_IxMonad.ibind(ixMonadMiddleware(dictMonad)));
};
var applicativeMiddleware = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyMiddleware(dictMonad);
    }, Control_IxMonad.ipure(ixMonadMiddleware(dictMonad)));
};
var monadMiddleware = function (dictMonad) {
    return function (dictApplicative) {
        return new Control_Monad.Monad(function () {
            return applicativeMiddleware(dictMonad);
        }, function () {
            return bindMiddleware(dictMonad);
        });
    };
};
var monadEffMiddleware = function (dictMonadEff) {
    return new Control_Monad_Eff_Class.MonadEff(function () {
        return monadMiddleware(dictMonadEff.Monad0())((dictMonadEff.Monad0()).Applicative0());
    }, function (e) {
        return Middleware(function (s) {
            return Control_Bind.bind((dictMonadEff.Monad0()).Bind1())(Control_Monad_Eff_Class.liftEff(dictMonadEff)(e))(function (v) {
                return Control_Applicative.pure((dictMonadEff.Monad0()).Applicative0())(new Data_Tuple.Tuple(v, s));
            });
        });
    });
};
module.exports = {
    Middleware: Middleware, 
    evalMiddleware: evalMiddleware, 
    hoistMiddleware: hoistMiddleware, 
    "lift'": lift$prime, 
    runMiddleware: runMiddleware, 
    ixMonadMiddlewareMiddleware: ixMonadMiddlewareMiddleware, 
    ixMonadMiddleware: ixMonadMiddleware, 
    functorMiddleware: functorMiddleware, 
    applyMiddleware: applyMiddleware, 
    applicativeMiddleware: applicativeMiddleware, 
    bindMiddleware: bindMiddleware, 
    monadMiddleware: monadMiddleware, 
    monadEffMiddleware: monadEffMiddleware
};
