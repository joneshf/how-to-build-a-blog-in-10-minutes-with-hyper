// Generated by purs version 0.11.4
"use strict";
var Control_Apply = require("../Control.Apply");
var Data_Eq = require("../Data.Eq");
var Data_Generic = require("../Data.Generic");
var Data_Maybe = require("../Data.Maybe");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Show = require("../Data.Show");
var Data_Unit = require("../Data.Unit");
var Status = function (x) {
    return x;
};
var status = function (code) {
    return function (reasonPhrase) {
        return {
            code: code, 
            reasonPhrase: reasonPhrase
        };
    };
};
var statusBadRequest = status(400)("Bad Request");
var statusCreated = status(201)("Created");
var statusForbidden = status(403)("Forbidden");
var statusFound = status(302)("Found");
var statusMethodNotAllowed = status(405)("Method Not Allowed");
var statusNotAcceptable = status(406)("Not Acceptable");
var statusNotFound = status(404)("Not Found");
var statusOK = status(200)("OK");
var statusUnauthorized = status(401)("Unauthorized");
var newtypeStatus = new Data_Newtype.Newtype(function (n) {
    return n;
}, Status);
var genericStatus = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Hyper.Status.Status" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Status))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 2) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (code1) {
                    return function (reasonPhrase1) {
                        return {
                            code: code1, 
                            reasonPhrase: reasonPhrase1
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][1].recValue(Data_Unit.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v["value1"][0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Hyper.Status.Status", [ {
        sigConstructor: "Hyper.Status.Status", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "code", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "reasonPhrase", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    } ]);
}, function (v) {
    return new Data_Generic.SProd("Hyper.Status.Status", [ function ($dollarq) {
        return new Data_Generic.SRecord([ {
            recLabel: "code", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(Data_Generic.genericInt)(v.code);
            }
        }, {
            recLabel: "reasonPhrase", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(Data_Generic.genericString)(v.reasonPhrase);
            }
        } ]);
    } ]);
});
var showStatus = new Data_Show.Show(Data_Generic.gShow(genericStatus));
var eqStatus = new Data_Eq.Eq(Data_Generic.gEq(genericStatus));
var ordStatus = new Data_Ord.Ord(function () {
    return eqStatus;
}, Data_Generic.gCompare(genericStatus));
module.exports = {
    Status: Status, 
    status: status, 
    statusBadRequest: statusBadRequest, 
    statusCreated: statusCreated, 
    statusForbidden: statusForbidden, 
    statusFound: statusFound, 
    statusMethodNotAllowed: statusMethodNotAllowed, 
    statusNotAcceptable: statusNotAcceptable, 
    statusNotFound: statusNotFound, 
    statusOK: statusOK, 
    statusUnauthorized: statusUnauthorized, 
    genericStatus: genericStatus, 
    newtypeStatus: newtypeStatus, 
    eqStatus: eqStatus, 
    ordStatus: ordStatus, 
    showStatus: showStatus
};
