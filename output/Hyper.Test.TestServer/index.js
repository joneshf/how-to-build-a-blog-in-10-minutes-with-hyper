// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_IxMonad = require("../Control.IxMonad");
var Control_Monad = require("../Control.Monad");
var Control_Monad_Writer = require("../Control.Monad.Writer");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HTTP_Method = require("../Data.HTTP.Method");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Semigroup = require("../Data.Semigroup");
var Data_StrMap = require("../Data.StrMap");
var Data_String = require("../Data.String");
var Hyper_Conn = require("../Hyper.Conn");
var Hyper_Header = require("../Hyper.Header");
var Hyper_Middleware = require("../Hyper.Middleware");
var Hyper_Middleware_Class = require("../Hyper.Middleware.Class");
var Hyper_Request = require("../Hyper.Request");
var Hyper_Response = require("../Hyper.Response");
var Hyper_Status = require("../Hyper.Status");
var TestResponse = (function () {
    function TestResponse(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TestResponse.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TestResponse(value0, value1, value2);
            };
        };
    };
    return TestResponse;
})();
var TestRequest = function (x) {
    return x;
};
var StringBody = function (x) {
    return x;
};
var testStatus = function (v) {
    return v.value0;
};
var testServer = function (dictMonad) {
    return function ($66) {
        return Control_Monad_Writer_Trans.execWriterT(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor["void"](Control_Monad_Writer_Trans.functorWriterT(((dictMonad.Bind1()).Apply0()).Functor0()))($66));
    };
};
var testHeaders = function (v) {
    return v.value1;
};
var testBodyChunks = function (v) {
    return v.value2;
};
var testBody = function (dictMonoid) {
    return function (v) {
        return Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid)(v.value2);
    };
};
var semigroupTestResponse = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return new TestResponse(Control_Alt.alt(Data_Maybe.altMaybe)(v.value0)(v1.value0), Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value1)(v1.value1), Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value2)(v1.value2));
    };
});
var semigroupStringBody = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var responseStringBody = function (dictMonad) {
    return new Hyper_Response.ResponseWritable(function ($67) {
        return Control_Applicative.pure(Hyper_Middleware.applicativeMiddleware(dictMonad))(StringBody($67));
    });
};
var resetResponse = function (v) {
    var $49 = {};
    for (var $50 in v) {
        if ({}.hasOwnProperty.call(v, $50)) {
            $49[$50] = v[$50];
        };
    };
    $49.response = new TestResponse(v.response.value0, v.response.value1, v.response.value2);
    return $49;
};
var responseWriterTestResponse = function (dictMonad) {
    return function (dictMonadTell) {
        return new Hyper_Response.Response(Hyper_Middleware_Class.modifyConn(Hyper_Middleware.ixMonadMiddleware(dictMonad))(Hyper_Middleware.ixMonadMiddlewareMiddleware(dictMonad.Applicative0()))(resetResponse), Hyper_Middleware_Class.modifyConn(Hyper_Middleware.ixMonadMiddleware(dictMonad))(Hyper_Middleware.ixMonadMiddlewareMiddleware(dictMonad.Applicative0()))(resetResponse), function (chunk) {
            return Hyper_Middleware["lift'"](dictMonad)(Control_Monad_Writer_Class.tell(dictMonadTell)(new TestResponse(Data_Maybe.Nothing.value, [  ], [ chunk ])));
        }, function (header) {
            return Hyper_Middleware["lift'"](dictMonad)(Control_Monad_Writer_Class.tell(dictMonadTell)(new TestResponse(Data_Maybe.Nothing.value, [ header ], Data_Monoid.mempty(Data_Monoid.monoidArray))));
        }, function (status) {
            return Control_IxMonad.iapplySecond(Hyper_Middleware.ixMonadMiddleware(dictMonad))(Hyper_Middleware["lift'"](dictMonad)(Control_Monad_Writer_Class.tell(dictMonadTell)(new TestResponse(new Data_Maybe.Just(status), [  ], [  ]))))(Hyper_Middleware_Class.modifyConn(Hyper_Middleware.ixMonadMiddleware(dictMonad))(Hyper_Middleware.ixMonadMiddlewareMiddleware(dictMonad.Applicative0()))(resetResponse));
        });
    };
};
var requestTestRequest = function (dictMonad) {
    return new Hyper_Request.Request(Control_IxMonad.ibind(Hyper_Middleware.ixMonadMiddleware(dictMonad))(Hyper_Middleware_Class.getConn(Hyper_Middleware.ixMonadMiddlewareMiddleware(dictMonad.Applicative0())))(function (v) {
        return Control_IxMonad.ipure(Hyper_Middleware.ixMonadMiddleware(dictMonad))({
            url: v.request.url, 
            contentLength: new Data_Maybe.Just(Data_String.length(v.request.body)), 
            method: v.request.method, 
            headers: v.request.headers
        });
    }));
};
var readableBodyStringBody = function (dictMonad) {
    return new Hyper_Request.ReadableBody(Control_IxMonad.ibind(Hyper_Middleware.ixMonadMiddleware(dictMonad))(Hyper_Middleware_Class.getConn(Hyper_Middleware.ixMonadMiddlewareMiddleware(dictMonad.Applicative0())))(function (v) {
        return Control_Applicative.pure(Hyper_Middleware.applicativeMiddleware(dictMonad))(v.request.body);
    }));
};
var newtypeStringBody = new Data_Newtype.Newtype(function (n) {
    return n;
}, StringBody);
var testStringBody = function (v) {
    return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap(newtypeStringBody))(v.value2));
};
var monoidTestResponse = new Data_Monoid.Monoid(function () {
    return semigroupTestResponse;
}, new TestResponse(Data_Maybe.Nothing.value, [  ], [  ]));
var monoidStringBody = new Data_Monoid.Monoid(function () {
    return semigroupStringBody;
}, "");
var defaultRequest = {
    url: "", 
    method: new Data_Either.Left(Data_HTTP_Method.GET.value), 
    body: "", 
    headers: Data_StrMap.empty
};
module.exports = {
    StringBody: StringBody, 
    TestRequest: TestRequest, 
    TestResponse: TestResponse, 
    defaultRequest: defaultRequest, 
    resetResponse: resetResponse, 
    testBody: testBody, 
    testBodyChunks: testBodyChunks, 
    testHeaders: testHeaders, 
    testServer: testServer, 
    testStatus: testStatus, 
    testStringBody: testStringBody, 
    readableBodyStringBody: readableBodyStringBody, 
    requestTestRequest: requestTestRequest, 
    newtypeStringBody: newtypeStringBody, 
    responseStringBody: responseStringBody, 
    semigroupStringBody: semigroupStringBody, 
    monoidStringBody: monoidStringBody, 
    semigroupTestResponse: semigroupTestResponse, 
    monoidTestResponse: monoidTestResponse, 
    responseWriterTestResponse: responseWriterTestResponse
};
