// Generated by purs version 0.11.4
"use strict";
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Data_DateTime = require("../Data.DateTime");
var Data_Either = require("../Data.Either");
var Data_Function = require("../Data.Function");
var Data_Maybe = require("../Data.Maybe");
var Node_Buffer = require("../Node.Buffer");
var Node_Encoding = require("../Node.Encoding");
var Node_FS = require("../Node.FS");
var Node_FS_Async = require("../Node.FS.Async");
var Node_FS_Perms = require("../Node.FS.Perms");
var Node_FS_Stats = require("../Node.FS.Stats");
var Node_Path = require("../Node.Path");
var Prelude = require("../Prelude");
var toAff = function (p) {
    return Control_Monad_Aff.makeAff(function (e) {
        return function (a) {
            return p(Data_Either.either(e)(a));
        };
    });
};
var toAff1 = function (f) {
    return function (a) {
        return toAff(f(a));
    };
};
var unlink = toAff1(Node_FS_Async.unlink);
var toAff2 = function (f) {
    return function (a) {
        return function (b) {
            return toAff(f(a)(b));
        };
    };
};
var truncate = toAff2(Node_FS_Async.truncate);
var writeFile = toAff2(Node_FS_Async.writeFile);
var toAff3 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return toAff(f(a)(b)(c));
            };
        };
    };
};
var utimes = toAff3(Node_FS_Async.utimes);
var writeTextFile = toAff3(Node_FS_Async.writeTextFile);
var toAff5 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return toAff(f(a)(b)(c)(d)(e));
                    };
                };
            };
        };
    };
};
var symlink = toAff3(Node_FS_Async.symlink);
var stat = toAff1(Node_FS_Async.stat);
var rmdir = toAff1(Node_FS_Async.rmdir);
var rename = toAff2(Node_FS_Async.rename);
var realpath$prime = toAff2(Node_FS_Async["realpath'"]);
var realpath = toAff1(Node_FS_Async.realpath);
var readlink = toAff1(Node_FS_Async.readlink);
var readdir = toAff1(Node_FS_Async.readdir);
var readTextFile = toAff2(Node_FS_Async.readTextFile);
var readFile = toAff1(Node_FS_Async.readFile);
var mkdir$prime = toAff2(Node_FS_Async["mkdir'"]);
var mkdir = toAff1(Node_FS_Async.mkdir);
var link = toAff2(Node_FS_Async.link);
var fdWrite = toAff5(Node_FS_Async.fdWrite);
var fdRead = toAff5(Node_FS_Async.fdRead);
var fdOpen = toAff3(Node_FS_Async.fdOpen);
var fdNext = toAff2(Node_FS_Async.fdNext);
var fdClose = toAff1(Node_FS_Async.fdClose);
var fdAppend = toAff2(Node_FS_Async.fdAppend);
var exists = function (file) {
    return Control_Monad_Aff.makeAff(function (v) {
        return function (a) {
            return Node_FS_Async.exists(file)(a);
        };
    });
};
var chown = toAff3(Node_FS_Async.chown);
var chmod = toAff2(Node_FS_Async.chmod);
var appendTextFile = toAff3(Node_FS_Async.appendTextFile);
var appendFile = toAff2(Node_FS_Async.appendFile);
module.exports = {
    appendFile: appendFile, 
    appendTextFile: appendTextFile, 
    chmod: chmod, 
    chown: chown, 
    exists: exists, 
    fdAppend: fdAppend, 
    fdClose: fdClose, 
    fdNext: fdNext, 
    fdOpen: fdOpen, 
    fdRead: fdRead, 
    fdWrite: fdWrite, 
    link: link, 
    mkdir: mkdir, 
    "mkdir'": mkdir$prime, 
    readFile: readFile, 
    readTextFile: readTextFile, 
    readdir: readdir, 
    readlink: readlink, 
    realpath: realpath, 
    "realpath'": realpath$prime, 
    rename: rename, 
    rmdir: rmdir, 
    stat: stat, 
    symlink: symlink, 
    truncate: truncate, 
    unlink: unlink, 
    utimes: utimes, 
    writeFile: writeFile, 
    writeTextFile: writeTextFile
};
