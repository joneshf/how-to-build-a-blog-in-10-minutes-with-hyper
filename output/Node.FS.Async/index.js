// Generated by purs version 0.11.4
"use strict";
var $foreign = require("./foreign");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Eff_Unsafe = require("../Control.Monad.Eff.Unsafe");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_DateTime = require("../Data.DateTime");
var Data_DateTime_Instant = require("../Data.DateTime.Instant");
var Data_Either = require("../Data.Either");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Function = require("../Data.Function");
var Data_Function_Uncurried = require("../Data.Function.Uncurried");
var Data_Functor = require("../Data.Functor");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Nullable = require("../Data.Nullable");
var Data_Show = require("../Data.Show");
var Data_Time_Duration = require("../Data.Time.Duration");
var Node_Buffer = require("../Node.Buffer");
var Node_Encoding = require("../Node.Encoding");
var Node_FS = require("../Node.FS");
var Node_FS_Internal = require("../Node.FS.Internal");
var Node_FS_Perms = require("../Node.FS.Perms");
var Node_FS_Stats = require("../Node.FS.Stats");
var Node_Path = require("../Node.Path");
var Prelude = require("../Prelude");
var handleCallback = function (cb) {
    return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
};
var fs = Node_FS_Internal.unsafeRequireFS;
var link = function (src) {
    return function (dst) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.link(src, dst, handleCallback(cb));
            });
        };
    };
};
var mkdir$prime = function (file) {
    return function (perms) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.mkdir(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
            });
        };
    };
};
var mkdir = Data_Function.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));
var readFile = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.readFile(file, {}, handleCallback(cb));
        });
    };
};
var readTextFile = function (encoding) {
    return function (file) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.readFile(file, {
                    encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                }, handleCallback(cb));
            });
        };
    };
};
var readdir = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.readdir(file, handleCallback(cb));
        });
    };
};
var readlink = function (path) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.readlink(path, handleCallback(cb));
        });
    };
};
var realpath = function (path) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.realpath(path, {}, handleCallback(cb));
        });
    };
};
var realpath$prime = function (path) {
    return function (cache) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.realpath(path, cache, handleCallback(cb));
            });
        };
    };
};
var rename = function (oldFile) {
    return function (newFile) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.rename(oldFile, newFile, handleCallback(cb));
            });
        };
    };
};
var rmdir = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.rmdir(file, handleCallback(cb));
        });
    };
};
var stat = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.stat(file, handleCallback(function ($32) {
                return cb(Data_Functor.map(Data_Either.functorEither)(Node_FS_Stats.Stats.create)($32));
            }));
        });
    };
};
var symlink = function (src) {
    return function (dest) {
        return function (ty) {
            return function (cb) {
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.symlink(src, dest, Node_FS.symlinkTypeToNode(ty), handleCallback(cb));
                });
            };
        };
    };
};
var truncate = function (file) {
    return function (len) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.truncate(file, len, handleCallback(cb));
            });
        };
    };
};
var unlink = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.unlink(file, handleCallback(cb));
        });
    };
};
var utimes = function (file) {
    return function (atime) {
        return function (mtime) {
            return function (cb) {
                var toEpochMilliseconds = function ($33) {
                    return Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime($33));
                };
                var ms = function (v) {
                    return Data_Int.round(v);
                };
                var fromDate = function (date) {
                    return ms(toEpochMilliseconds(date)) / 1000 | 0;
                };
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.utimes(file, fromDate(atime), fromDate(mtime), handleCallback(cb));
                });
            };
        };
    };
};
var writeFile = function (file) {
    return function (buff) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.writeFile(file, buff, {}, handleCallback(cb));
            });
        };
    };
};
var writeTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return function (cb) {
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.writeFile(file, buff, {
                        encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                    }, handleCallback(cb));
                });
            };
        };
    };
};
var fdWrite = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function (cb) {
                        return Node_FS_Internal.mkEff(function (v) {
                            return fs.write(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                        });
                    };
                };
            };
        };
    };
};
var fdRead = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function (cb) {
                        return Node_FS_Internal.mkEff(function (v) {
                            return fs.read(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                        });
                    };
                };
            };
        };
    };
};
var fdOpen = function (file) {
    return function (flags) {
        return function (mode) {
            return function (cb) {
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.open(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode), handleCallback(cb));
                });
            };
        };
    };
};
var fdNext = function (fd) {
    return function (buff) {
        return function (cb) {
            return function __do() {
                var v = Node_Buffer.size(buff)();
                return fdRead(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)(cb)();
            };
        };
    };
};
var fdClose = function (fd) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.close(fd, handleCallback(cb));
        });
    };
};
var fdAppend = function (fd) {
    return function (buff) {
        return function (cb) {
            return function __do() {
                var v = Node_Buffer.size(buff)();
                return fdWrite(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)(cb)();
            };
        };
    };
};
var exists = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.exists(file, function (b) {
                return Control_Monad_Eff.runPure(Control_Monad_Eff_Unsafe.unsafeCoerceEff(cb(b)));
            });
        });
    };
};
var chown = function (file) {
    return function (uid) {
        return function (gid) {
            return function (cb) {
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.chown(file, uid, gid, handleCallback(cb));
                });
            };
        };
    };
};
var chmod = function (file) {
    return function (perms) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.chmod(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
            });
        };
    };
};
var appendTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return function (cb) {
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.appendFile(file, buff, {
                        encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                    }, handleCallback(cb));
                });
            };
        };
    };
};
var appendFile = function (file) {
    return function (buff) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.appendFile(file, buff, {}, handleCallback(cb));
            });
        };
    };
};
module.exports = {
    appendFile: appendFile, 
    appendTextFile: appendTextFile, 
    chmod: chmod, 
    chown: chown, 
    exists: exists, 
    fdAppend: fdAppend, 
    fdClose: fdClose, 
    fdNext: fdNext, 
    fdOpen: fdOpen, 
    fdRead: fdRead, 
    fdWrite: fdWrite, 
    link: link, 
    mkdir: mkdir, 
    "mkdir'": mkdir$prime, 
    readFile: readFile, 
    readTextFile: readTextFile, 
    readdir: readdir, 
    readlink: readlink, 
    realpath: realpath, 
    "realpath'": realpath$prime, 
    rename: rename, 
    rmdir: rmdir, 
    stat: stat, 
    symlink: symlink, 
    truncate: truncate, 
    unlink: unlink, 
    utimes: utimes, 
    writeFile: writeFile, 
    writeTextFile: writeTextFile
};
