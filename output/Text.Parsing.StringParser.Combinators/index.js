// Generated by purs version 0.11.4
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Lazy = require("../Control.Lazy");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");
var Text_Parsing_StringParser = require("../Text.Parsing.StringParser");
var withError = function (p) {
    return function (msg) {
        return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Text_Parsing_StringParser.fail(msg));
    };
};
var sepEndBy1 = function (p) {
    return function (sep) {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
            return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(sep)(function (v1) {
                return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(sepEndBy(p)(sep))(function (v2) {
                    return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Data_List_Types.Cons(v, v2));
                });
            }))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List.singleton(v)));
        });
    };
};
var sepEndBy = function (p) {
    return function (sep) {
        return Control_Alt.alt(Text_Parsing_StringParser.altParser)(sepEndBy1(p)(sep))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value));
    };
};
var optional = function (p) {
    return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
        return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Unit.unit);
    }))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Unit.unit));
};
var option = function (a) {
    return function (p) {
        return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
    };
};
var optionMaybe = function (p) {
    return option(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(p));
};
var many1Till = function (p) {
    return function (end) {
        var ending = function (acc) {
            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(end)(function (v) {
                return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Done(Data_List.reverse(acc)));
            });
        };
        var $$continue = function (acc) {
            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
                return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Loop(new Data_List_Types.Cons(v, acc)));
            });
        };
        var inner = function (acc) {
            return Control_Alt.alt(Text_Parsing_StringParser.altParser)(ending(acc))($$continue(acc));
        };
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
            return Control_Monad_Rec_Class.tailRecM(Text_Parsing_StringParser.monadRecParser)(inner)(Control_Applicative.pure(Data_List_Types.applicativeList)(v));
        });
    };
};
var manyTill = function (p) {
    return function (end) {
        return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(end)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value)))(many1Till(p)(end));
    };
};
var many = Data_List.manyRec(Text_Parsing_StringParser.monadRecParser)(Text_Parsing_StringParser.alternativeParser);
var many1 = function (p) {
    return Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_Types.Cons.create)(p))(many(p));
};
var sepBy1 = function (p) {
    return function (sep) {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(many(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(sep)(p)))(function (v1) {
                return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Data_List_Types.Cons(v, v1));
            });
        });
    };
};
var sepBy = function (p) {
    return function (sep) {
        return Control_Alt.alt(Text_Parsing_StringParser.altParser)(sepBy1(p)(sep))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value));
    };
};
var lookAhead = function (v) {
    return function (s) {
        var v1 = v(s);
        if (v1 instanceof Data_Either.Right) {
            return new Data_Either.Right({
                result: v1.value0.result, 
                suffix: s
            });
        };
        return v1;
    };
};
var endBy1 = function (p) {
    return function (sep) {
        return many1(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(p)(sep));
    };
};
var endBy = function (p) {
    return function (sep) {
        return many(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(p)(sep));
    };
};
var choice = function (dictFoldable) {
    return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_StringParser.altParser))(Text_Parsing_StringParser.fail("Nothing to parse"));
};
var chainr1$prime = function (p) {
    return function (f) {
        return function (a) {
            return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(f)(function (v) {
                return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(chainr1(p)(f))(function (v1) {
                    return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v(a)(v1));
                });
            }))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
        };
    };
};
var chainr1 = function (p) {
    return function (f) {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
            return chainr1$prime(p)(f)(v);
        });
    };
};
var chainr = function (p) {
    return function (f) {
        return function (a) {
            return Control_Alt.alt(Text_Parsing_StringParser.altParser)(chainr1(p)(f))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
        };
    };
};
var chainl1$prime = function (p) {
    return function (f) {
        return function (a) {
            return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(f)(function (v) {
                return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v1) {
                    return chainl1$prime(p)(f)(v(a)(v1));
                });
            }))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
        };
    };
};
var chainl1 = function (p) {
    return function (f) {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
            return chainl1$prime(p)(f)(v);
        });
    };
};
var chainl = function (p) {
    return function (f) {
        return function (a) {
            return Control_Alt.alt(Text_Parsing_StringParser.altParser)(chainl1(p)(f))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
        };
    };
};
var between = function (open) {
    return function (close) {
        return function (p) {
            return Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(open)(p))(close);
        };
    };
};
module.exports = {
    between: between, 
    chainl: chainl, 
    chainl1: chainl1, 
    "chainl1'": chainl1$prime, 
    chainr: chainr, 
    chainr1: chainr1, 
    "chainr1'": chainr1$prime, 
    choice: choice, 
    endBy: endBy, 
    endBy1: endBy1, 
    lookAhead: lookAhead, 
    many: many, 
    many1: many1, 
    many1Till: many1Till, 
    manyTill: manyTill, 
    option: option, 
    optionMaybe: optionMaybe, 
    optional: optional, 
    sepBy: sepBy, 
    sepBy1: sepBy1, 
    sepEndBy: sepEndBy, 
    sepEndBy1: sepEndBy1, 
    withError: withError
};
