// Generated by purs version 0.11.4
"use strict";
var Control_Category = require("../Control.Category");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_StrMap = require("../Data.StrMap");
var Data_String = require("../Data.String");
var Data_Tuple = require("../Data.Tuple");
var Data_Tuple_Nested = require("../Data.Tuple.Nested");
var Prelude = require("../Prelude");
var Text_Smolder_Markup = require("../Text.Smolder.Markup");
var Text_Smolder_Renderer_Util = require("../Text.Smolder.Renderer.Util");
var escapeMap = Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("&", "&amp;"), new Data_Tuple.Tuple("<", "&lt;"), new Data_Tuple.Tuple(">", "&gt;"), new Data_Tuple.Tuple("\"", "&quot;"), new Data_Tuple.Tuple("'", "&#39;"), new Data_Tuple.Tuple("/", "&#x2F;") ]);
var escapeChar = function (s) {
    return Data_Maybe.maybe(s)(Control_Category.id(Control_Category.categoryFn))(Data_StrMap.lookup(s)(escapeMap));
};
var $$escape = function (s) {
    return Data_String.joinWith("")(Data_Functor.map(Data_Functor.functorArray)(escapeChar)(Data_String.split("")(s)));
};
var renderNode = function (v) {
    if (v instanceof Text_Smolder_Renderer_Util.Element) {
        var showTail = function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return "/>";
            };
            return ">" + (Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_Functor.map(Data_List_Types.functorList)(renderNode)(v1)) + ("</" + (v.value0 + ">")));
        };
        var showAttrs = function (a$prime) {
            var pair = function (k) {
                return " " + (k + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v1) {
                    return "=\"" + ($$escape(v1) + "\"");
                })(Data_StrMap.lookup(k)(a$prime)));
            };
            return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Functor.map(Data_Functor.functorArray)(pair)(Data_StrMap.keys(a$prime)));
        };
        return "<" + (v.value0 + (showAttrs(v.value1) + showTail(v.value3)));
    };
    if (v instanceof Text_Smolder_Renderer_Util.Text) {
        return $$escape(v.value0);
    };
    throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 36, column 1 - line 44, column 81: " + [ v.constructor.name ]);
};
var render = function ($9) {
    return Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_Functor.map(Data_List_Types.functorList)(renderNode)(Text_Smolder_Renderer_Util.renderMarkup($9)));
};
module.exports = {
    render: render, 
    renderNode: renderNode
};
