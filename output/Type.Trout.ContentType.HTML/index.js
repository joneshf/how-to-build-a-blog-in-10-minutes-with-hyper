// Generated by purs version 0.11.4
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_List_Types = require("../Data.List.Types");
var Data_MediaType_Common = require("../Data.MediaType.Common");
var Data_Tuple = require("../Data.Tuple");
var Data_URI = require("../Data.URI");
var Prelude = require("../Prelude");
var Text_Smolder_HTML = require("../Text.Smolder.HTML");
var Text_Smolder_HTML_Attributes = require("../Text.Smolder.HTML.Attributes");
var Text_Smolder_Markup = require("../Text.Smolder.Markup");
var Text_Smolder_Renderer_String = require("../Text.Smolder.Renderer.String");
var Type_Trout_ContentType = require("../Type.Trout.ContentType");
var EncodeHTML = function (encodeHTML) {
    this.encodeHTML = encodeHTML;
};
var mimeRenderHTML = new Type_Trout_ContentType.MimeRender(function (p) {
    return Text_Smolder_Renderer_String.render;
});
var linkTo = function (uri) {
    return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.a)(Text_Smolder_HTML_Attributes.href(Data_URI.printURI(uri)));
};
var hasMediaTypeHTML = new Type_Trout_ContentType.HasMediaType(function (v) {
    return Data_MediaType_Common.textHTML;
});
var encodeHTML = function (dict) {
    return dict.encodeHTML;
};
var mimeRenderHTMLEncodeHTML = function (dictEncodeHTML) {
    return new Type_Trout_ContentType.MimeRender(function (v) {
        return function ($4) {
            return Text_Smolder_Renderer_String.render(encodeHTML(dictEncodeHTML)($4));
        };
    });
};
var allMimeRenderHTML = function (dictEncodeHTML) {
    return new Type_Trout_ContentType.AllMimeRender(function (p) {
        return function (x) {
            return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Data_Tuple.Tuple(Type_Trout_ContentType.getMediaType(hasMediaTypeHTML)(p), Type_Trout_ContentType.mimeRender(mimeRenderHTMLEncodeHTML(dictEncodeHTML))(p)(x)));
        };
    });
};
module.exports = {
    EncodeHTML: EncodeHTML, 
    encodeHTML: encodeHTML, 
    linkTo: linkTo, 
    hasMediaTypeHTML: hasMediaTypeHTML, 
    mimeRenderHTML: mimeRenderHTML, 
    mimeRenderHTMLEncodeHTML: mimeRenderHTMLEncodeHTML, 
    allMimeRenderHTML: allMimeRenderHTML
};
